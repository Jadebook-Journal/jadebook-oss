/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Jadebook OSS API
 * OpenAPI spec version: 1.0.0
 */

import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseInfiniteQueryResult,
	DefinedUseQueryResult,
	InfiniteData,
	MutationFunction,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseInfiniteQueryOptions,
	UseInfiniteQueryResult,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";

export type GetApiDoc200 = {
	message: string;
};

export type GetApiProfile200 = {
	/** @nullable */
	config: string | null;
	created_at: string;
	current_streak: number;
	/** The user's unique ID ‚Äî reference to the Supabase Auth user ID */
	id: string;
	/** @nullable */
	last_entry_date: string | null;
	longest_streak: number;
	/** @nullable */
	profile_image: string | null;
	/** @nullable */
	theme: string | null;
	updated_at: string;
	/** @nullable */
	username: string | null;
};

export type GetApiProfile401 = {
	message: string;
};

export type GetApiProfile500 = {
	message: string;
};

/**
 * Profile update data - all fields are optional for partial updates
 */
export type PutApiProfileBody = {
	/** @nullable */
	profile_image?: string | null;
	/** @nullable */
	theme?: string | null;
	/** @nullable */
	config?: string | null;
	/** @nullable */
	username?: string | null;
};

export type PutApiProfile200 = {
	message: string;
};

export type PutApiProfile400 = {
	message: string;
};

export type PutApiProfile401 = {
	message: string;
};

export type PutApiProfile500 = {
	message: string;
};

export type GetApiAssetsParams = {
	/**
	 * Filter assets by entity type
	 */
	entityType?: GetApiAssetsEntityType;
	/**
	 * Filter assets by entity ID
	 */
	entityId?: string;
};

export type GetApiAssetsEntityType =
	(typeof GetApiAssetsEntityType)[keyof typeof GetApiAssetsEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiAssetsEntityType = {
	entry: "entry",
	goal: "goal",
	log: "log",
} as const;

export type GetApiAssets200DataItem = {
	id: string;
	created_at: string;
	mime_type: string;
	size: number;
	file_name: string;
	path: string;
	entity_type: string;
	entity_id: string;
	user_id: string;
	/** Pre-signed URL for accessing the file (expires in 1 hour) */
	signed_url: string;
};

export type GetApiAssets200 = {
	data: GetApiAssets200DataItem[];
};

export type GetApiAssets400 = {
	message: string;
};

export type GetApiAssets401 = {
	message: string;
};

export type GetApiAssets500 = {
	message: string;
};

/**
 * Type of entity this asset belongs to
 */
export type PostApiAssetsBodyEntityType =
	(typeof PostApiAssetsBodyEntityType)[keyof typeof PostApiAssetsBodyEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostApiAssetsBodyEntityType = {
	entry: "entry",
	goal: "goal",
	log: "log",
} as const;

export type PostApiAssetsBody = {
	/** MIME type of the file */
	mime_type: string;
	/** File size in bytes */
	size: number;
	/** Original filename */
	filename: string;
	/** Storage path of the file */
	filepath: string;
	/** Type of entity this asset belongs to */
	entity_type: PostApiAssetsBodyEntityType;
	/** ID of the entity this asset belongs to */
	entity_id: string;
};

export type PostApiAssets201 = {
	id: string;
};

export type PostApiAssets400 = {
	message: string;
};

export type PostApiAssets401 = {
	message: string;
};

export type PostApiAssets500 = {
	message: string;
};

export type GetApiAssetsId200 = {
	id: string;
	created_at: string;
	mime_type: string;
	size: number;
	file_name: string;
	path: string;
	entity_type: string;
	entity_id: string;
	user_id: string;
	/** Pre-signed URL for accessing the file (expires in 1 hour) */
	signed_url: string;
};

export type GetApiAssetsId400 = {
	message: string;
};

export type GetApiAssetsId401 = {
	message: string;
};

export type GetApiAssetsId404 = {
	message: string;
};

export type GetApiAssetsId500 = {
	message: string;
};

export type PutApiAssetsIdBodyEntityType =
	(typeof PutApiAssetsIdBodyEntityType)[keyof typeof PutApiAssetsIdBodyEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutApiAssetsIdBodyEntityType = {
	entry: "entry",
	goal: "goal",
	log: "log",
} as const;

export type PutApiAssetsIdBody = {
	mime_type?: string;
	size?: number;
	filename?: string;
	filepath?: string;
	entity_type?: PutApiAssetsIdBodyEntityType;
	entity_id?: string;
};

export type PutApiAssetsId200 = {
	message: string;
};

export type PutApiAssetsId400 = {
	message: string;
};

export type PutApiAssetsId401 = {
	message: string;
};

export type PutApiAssetsId404 = {
	message: string;
};

export type PutApiAssetsId500 = {
	message: string;
};

export type DeleteApiAssetsIdBody = {
	/** Storage path of the file to delete */
	path: string;
};

export type DeleteApiAssetsId200 = {
	message: string;
};

export type DeleteApiAssetsId400 = {
	message: string;
};

export type DeleteApiAssetsId401 = {
	message: string;
};

export type DeleteApiAssetsId404 = {
	message: string;
};

export type DeleteApiAssetsId500 = {
	message: string;
};

export type PostApiAssetsSignedUrlBody = {
	/**
	 * Storage path of the file
	 * @minLength 1
	 */
	path: string;
	/** Storage bucket name */
	bucket?: string;
};

export type PostApiAssetsSignedUrl200 = {
	signedUrl: string;
};

export type PostApiAssetsSignedUrl400 = {
	message: string;
};

export type PostApiAssetsSignedUrl401 = {
	message: string;
};

export type PostApiAssetsSignedUrl500 = {
	message: string;
};

/**
 * Type of entity this file belongs to
 */
export type PostApiAssetsUploadBodyEntityType =
	(typeof PostApiAssetsUploadBodyEntityType)[keyof typeof PostApiAssetsUploadBodyEntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostApiAssetsUploadBodyEntityType = {
	entry: "entry",
	goal: "goal",
	log: "log",
} as const;

export type PostApiAssetsUploadBody = {
	/** The file to upload */
	file?: Blob;
	/** Type of entity this file belongs to */
	entity_type: PostApiAssetsUploadBodyEntityType;
	/** ID of the entity this file belongs to */
	entity_id: string;
};

export type PostApiAssetsUpload201EntityType =
	(typeof PostApiAssetsUpload201EntityType)[keyof typeof PostApiAssetsUpload201EntityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostApiAssetsUpload201EntityType = {
	entry: "entry",
	goal: "goal",
	log: "log",
} as const;

export type PostApiAssetsUpload201 = {
	path: string;
	id: string;
	mime_type: string;
	size: number;
	file_name: string;
	entity_type: PostApiAssetsUpload201EntityType;
	entity_id: string;
	/** Pre-signed URL for accessing the uploaded file (expires in 1 hour) */
	signed_url: string;
};

export type PostApiAssetsUpload400 = {
	message: string;
};

export type PostApiAssetsUpload401 = {
	message: string;
};

export type PostApiAssetsUpload500 = {
	message: string;
};

export type GetApiEntriesParams = {
	/**
	 * Page number for pagination (0-based)
	 */
	page?: string;
	/**
	 * Filter entries by tag ID
	 */
	tagId?: string;
	/**
	 * Filter entries by type
	 */
	type?: GetApiEntriesType;
	/**
	 * Sort by date field
	 */
	dateType?: GetApiEntriesDateType;
};

export type GetApiEntriesType =
	(typeof GetApiEntriesType)[keyof typeof GetApiEntriesType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiEntriesType = {
	entry: "entry",
	prompted: "prompted",
	all: "all",
} as const;

export type GetApiEntriesDateType =
	(typeof GetApiEntriesDateType)[keyof typeof GetApiEntriesDateType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiEntriesDateType = {
	updated_at: "updated_at",
	created_at: "created_at",
	entry_date: "entry_date",
} as const;

export type GetApiEntries200DataItem = {
	id: string;
	title: string;
	created_at: string;
	updated_at: string;
	entry_date: string;
	/** @nullable */
	tags: string[] | null;
	/** @nullable */
	excerpt: string | null;
	pinned: boolean;
	/** @nullable */
	icon: string | null;
	type: string;
};

export type GetApiEntries200Meta = {
	totalCount: number;
	totalPages: number;
	currentPage: number;
	hasNextPage: boolean;
};

export type GetApiEntries200 = {
	data: GetApiEntries200DataItem[];
	meta: GetApiEntries200Meta;
};

export type GetApiEntries400 = {
	message: string;
};

export type GetApiEntries401 = {
	message: string;
};

export type GetApiEntries500 = {
	message: string;
};

/**
 * The type of entry
 */
export type PostApiEntriesBodyType =
	(typeof PostApiEntriesBodyType)[keyof typeof PostApiEntriesBodyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostApiEntriesBodyType = {
	entry: "entry",
	prompted: "prompted",
} as const;

export type PostApiEntriesBody = {
	/** The title of the entry */
	title: string;
	/** The date for the entry */
	entry_date?: string;
	/** Array of tag IDs associated with the entry */
	tags?: string[];
	/** The type of entry */
	type: PostApiEntriesBodyType;
	/**
	 * A brief excerpt or summary of the entry
	 * @nullable
	 */
	excerpt?: string | null;
	/**
	 * The main content of the entry
	 * @nullable
	 */
	content?: string | null;
};

export type PostApiEntries201 = {
	id: string;
};

export type PostApiEntries400 = {
	message: string;
};

export type PostApiEntries401 = {
	message: string;
};

export type PostApiEntries500 = {
	message: string;
};

export type GetApiEntriesId200 = {
	id: string;
	user_id: string;
	title: string;
	created_at: string;
	updated_at: string;
	entry_date: string;
	/** @nullable */
	cover: string | null;
	/** @nullable */
	tags: string[] | null;
	/** @nullable */
	content: string | null;
	character_count: number;
	/** @nullable */
	excerpt: string | null;
	pinned: boolean;
	type: string;
	/** @nullable */
	icon: string | null;
};

export type GetApiEntriesId400 = {
	message: string;
};

export type GetApiEntriesId401 = {
	message: string;
};

export type GetApiEntriesId404 = {
	message: string;
};

export type GetApiEntriesId500 = {
	message: string;
};

export type PutApiEntriesIdBodyType =
	(typeof PutApiEntriesIdBodyType)[keyof typeof PutApiEntriesIdBodyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutApiEntriesIdBodyType = {
	entry: "entry",
	prompted: "prompted",
} as const;

export type PutApiEntriesIdBody = {
	character_count?: number;
	/** @nullable */
	content?: string | null;
	/** @nullable */
	cover?: string | null;
	entry_date?: string;
	/** @nullable */
	excerpt?: string | null;
	pinned?: boolean;
	/** @nullable */
	tags?: string[] | null;
	title?: string;
	/** @nullable */
	icon?: string | null;
	type?: PutApiEntriesIdBodyType;
};

export type PutApiEntriesId200 = {
	message: string;
};

export type PutApiEntriesId400 = {
	message: string;
};

export type PutApiEntriesId401 = {
	message: string;
};

export type PutApiEntriesId404 = {
	message: string;
};

export type PutApiEntriesId500 = {
	message: string;
};

export type DeleteApiEntriesId200 = {
	message: string;
};

export type DeleteApiEntriesId400 = {
	message: string;
};

export type DeleteApiEntriesId401 = {
	message: string;
};

export type DeleteApiEntriesId404 = {
	message: string;
};

export type DeleteApiEntriesId500 = {
	message: string;
};

export type GetApiEntriesIdMetadata200 = {
	title: string;
	/** @nullable */
	excerpt: string | null;
};

export type GetApiEntriesIdMetadata400 = {
	message: string;
};

export type GetApiEntriesIdMetadata401 = {
	message: string;
};

export type GetApiEntriesIdMetadata404 = {
	message: string;
};

export type GetApiEntriesIdMetadata500 = {
	message: string;
};

export type GetApiGoalsParams = {
	/**
	 * The number of goals to return ‚Äî A numerical string since this is a GET route
	 */
	limit?: string;
	/**
	 * Filter goals by state (active, archived)
	 */
	state?: GetApiGoalsState;
};

export type GetApiGoalsState =
	(typeof GetApiGoalsState)[keyof typeof GetApiGoalsState];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiGoalsState = {
	active: "active",
	archived: "archived",
} as const;

export type GetApiGoals200Item = {
	id: string;
	user_id: string;
	title: string;
	/** @nullable */
	description: string | null;
	created_at: string;
	updated_at: string;
	end_date: string;
	state: string;
	/** @nullable */
	icon: string | null;
	/** @nullable */
	tags: string[] | null;
	pinned: boolean;
	/** @nullable */
	cover: string | null;
};

export type GetApiGoals400 = {
	message: string;
};

export type GetApiGoals401 = {
	message: string;
};

export type GetApiGoals500 = {
	message: string;
};

export type PostApiGoalsBody = {
	/**
	 * The title of the goal
	 * @minLength 3
	 */
	title: string;
	/**
	 * A detailed description of the goal
	 * @maxLength 400
	 * @nullable
	 */
	description?: string | null;
	/**
	 * An icon representing the goal
	 * @nullable
	 */
	icon?: string | null;
	/** The target end date for the goal (must be at least 1 day in the future) */
	end_date: string;
	/**
	 * Array of tag IDs associated with the goal
	 * @nullable
	 */
	tags?: string[] | null;
	/** Whether the goal should be pinned */
	pinned?: boolean;
};

export type PostApiGoals201 = {
	id: string;
};

export type PostApiGoals400 = {
	message: string;
};

export type PostApiGoals401 = {
	message: string;
};

export type PostApiGoals500 = {
	message: string;
};

export type GetApiGoalsId200 = {
	id: string;
	user_id: string;
	title: string;
	/** @nullable */
	description: string | null;
	created_at: string;
	updated_at: string;
	end_date: string;
	state: string;
	/** @nullable */
	icon: string | null;
	/** @nullable */
	tags: string[] | null;
	pinned: boolean;
	/** @nullable */
	cover: string | null;
};

export type GetApiGoalsId400 = {
	message: string;
};

export type GetApiGoalsId401 = {
	message: string;
};

export type GetApiGoalsId404 = {
	message: string;
};

export type GetApiGoalsId500 = {
	message: string;
};

/**
 * The state of the goal
 */
export type PutApiGoalsIdBodyState =
	(typeof PutApiGoalsIdBodyState)[keyof typeof PutApiGoalsIdBodyState];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutApiGoalsIdBodyState = {
	active: "active",
	archived: "archived",
} as const;

export type PutApiGoalsIdBody = {
	/**
	 * The updated title of the goal
	 * @minLength 3
	 */
	title?: string;
	/**
	 * The updated description of the goal
	 * @maxLength 400
	 * @nullable
	 */
	description?: string | null;
	/**
	 * The updated icon representing the goal
	 * @nullable
	 */
	icon?: string | null;
	/** The updated target end date for the goal */
	end_date?: string;
	/**
	 * Updated array of tag IDs associated with the goal
	 * @nullable
	 */
	tags?: string[] | null;
	/** Whether the goal should be pinned to the sidebar */
	pinned?: boolean;
	/** The state of the goal */
	state?: PutApiGoalsIdBodyState;
	/**
	 * A cover image URL for the goal
	 * @nullable
	 */
	cover?: string | null;
};

export type PutApiGoalsId200 = {
	message: string;
};

export type PutApiGoalsId400 = {
	message: string;
};

export type PutApiGoalsId401 = {
	message: string;
};

export type PutApiGoalsId404 = {
	message: string;
};

export type PutApiGoalsId500 = {
	message: string;
};

export type DeleteApiGoalsId200 = {
	message: string;
};

export type DeleteApiGoalsId400 = {
	message: string;
};

export type DeleteApiGoalsId401 = {
	message: string;
};

export type DeleteApiGoalsId404 = {
	message: string;
};

export type DeleteApiGoalsId500 = {
	message: string;
};

export type GetApiGoalGoalIdLogsParams = {
	/**
	 * Page number for pagination (0-based)
	 */
	page?: string;
};

export type GetApiGoalGoalIdLogs200DataItem = {
	id: string;
	goal_id: string;
	user_id: string;
	/** @nullable */
	content: string | null;
	/** @nullable */
	type: string | null;
	created_at: string;
};

export type GetApiGoalGoalIdLogs200Meta = {
	totalCount: number;
	totalPages: number;
	currentPage: number;
	hasNextPage: boolean;
};

export type GetApiGoalGoalIdLogs200 = {
	data: GetApiGoalGoalIdLogs200DataItem[];
	meta: GetApiGoalGoalIdLogs200Meta;
};

export type GetApiGoalGoalIdLogs400 = {
	message: string;
};

export type GetApiGoalGoalIdLogs401 = {
	message: string;
};

export type GetApiGoalGoalIdLogs404 = {
	message: string;
};

export type GetApiGoalGoalIdLogs500 = {
	message: string;
};

/**
 * Type for the log entry (neutral, good, bad)
 */
export type PostApiGoalGoalIdLogsBodyType =
	(typeof PostApiGoalGoalIdLogsBodyType)[keyof typeof PostApiGoalGoalIdLogsBodyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostApiGoalGoalIdLogsBodyType = {
	neutral: "neutral",
	good: "good",
	bad: "bad",
} as const;

export type PostApiGoalGoalIdLogsBody = {
	/**
	 * The content of the log entry
	 * @minLength 1
	 */
	content: string;
	/** Type for the log entry (neutral, good, bad) */
	type?: PostApiGoalGoalIdLogsBodyType;
};

export type PostApiGoalGoalIdLogs201 = {
	id: string;
};

export type PostApiGoalGoalIdLogs400 = {
	message: string;
};

export type PostApiGoalGoalIdLogs401 = {
	message: string;
};

export type PostApiGoalGoalIdLogs404 = {
	message: string;
};

export type PostApiGoalGoalIdLogs500 = {
	message: string;
};

/**
 * Updated type for the log entry (neutral, good, bad)
 */
export type PutApiGoalGoalIdLogsIdBodyType =
	(typeof PutApiGoalGoalIdLogsIdBodyType)[keyof typeof PutApiGoalGoalIdLogsIdBodyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutApiGoalGoalIdLogsIdBodyType = {
	neutral: "neutral",
	good: "good",
	bad: "bad",
} as const;

export type PutApiGoalGoalIdLogsIdBody = {
	/**
	 * The updated content of the log entry
	 * @minLength 1
	 */
	content?: string;
	/** Updated type for the log entry (neutral, good, bad) */
	type?: PutApiGoalGoalIdLogsIdBodyType;
};

export type PutApiGoalGoalIdLogsId200 = {
	message: string;
};

export type PutApiGoalGoalIdLogsId400 = {
	message: string;
};

export type PutApiGoalGoalIdLogsId401 = {
	message: string;
};

export type PutApiGoalGoalIdLogsId404 = {
	message: string;
};

export type PutApiGoalGoalIdLogsId500 = {
	message: string;
};

export type DeleteApiGoalGoalIdLogsId200 = {
	message: string;
};

export type DeleteApiGoalGoalIdLogsId401 = {
	message: string;
};

export type DeleteApiGoalGoalIdLogsId404 = {
	message: string;
};

export type DeleteApiGoalGoalIdLogsId500 = {
	message: string;
};

export type GetApiTags200Item = {
	id: string;
	user_id: string;
	label: string;
	/** @nullable */
	variant: string | null;
	/** @nullable */
	color: string | null;
	/** @nullable */
	icon: string | null;
	/** @nullable */
	cover: string | null;
	pinned: boolean;
	created_at: string;
	updated_at: string;
};

export type GetApiTags401 = {
	message: string;
};

export type GetApiTags500 = {
	message: string;
};

/**
 * The visual variant of the tag
 */
export type PostApiTagsBodyVariant =
	(typeof PostApiTagsBodyVariant)[keyof typeof PostApiTagsBodyVariant];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostApiTagsBodyVariant = {
	outline: "outline",
	color: "color",
	text: "text",
	flat: "flat",
} as const;

/**
 * The color scheme of the tag
 */
export type PostApiTagsBodyColor =
	(typeof PostApiTagsBodyColor)[keyof typeof PostApiTagsBodyColor];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostApiTagsBodyColor = {
	slate: "slate",
	gray: "gray",
	zinc: "zinc",
	neutral: "neutral",
	stone: "stone",
	red: "red",
	orange: "orange",
	amber: "amber",
	yellow: "yellow",
	lime: "lime",
	green: "green",
	emerald: "emerald",
	teal: "teal",
	cyan: "cyan",
	sky: "sky",
	blue: "blue",
	indigo: "indigo",
	violet: "violet",
	purple: "purple",
	fuchsia: "fuchsia",
	pink: "pink",
	rose: "rose",
} as const;

export type PostApiTagsBody = {
	/**
	 * The text content of the tag
	 * @minLength 1
	 */
	label: string;
	/** The visual variant of the tag */
	variant: PostApiTagsBodyVariant;
	/** The color scheme of the tag */
	color: PostApiTagsBodyColor;
	/** An optional icon for the tag */
	icon: string;
};

export type PostApiTags201 = {
	id: string;
};

export type PostApiTags400 = {
	message: string;
};

export type PostApiTags401 = {
	message: string;
};

export type PostApiTags500 = {
	message: string;
};

export type GetApiTagsId200 = {
	id: string;
	user_id: string;
	label: string;
	/** @nullable */
	variant: string | null;
	/** @nullable */
	color: string | null;
	/** @nullable */
	icon: string | null;
	/** @nullable */
	cover: string | null;
	pinned: boolean;
	created_at: string;
	updated_at: string;
};

export type GetApiTagsId400 = {
	message: string;
};

export type GetApiTagsId401 = {
	message: string;
};

export type GetApiTagsId404 = {
	message: string;
};

export type GetApiTagsId500 = {
	message: string;
};

/**
 * The updated visual variant of the tag
 */
export type PutApiTagsIdBodyVariant =
	(typeof PutApiTagsIdBodyVariant)[keyof typeof PutApiTagsIdBodyVariant];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutApiTagsIdBodyVariant = {
	outline: "outline",
	color: "color",
	text: "text",
	flat: "flat",
} as const;

/**
 * The updated color scheme of the tag
 */
export type PutApiTagsIdBodyColor =
	(typeof PutApiTagsIdBodyColor)[keyof typeof PutApiTagsIdBodyColor];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutApiTagsIdBodyColor = {
	slate: "slate",
	gray: "gray",
	zinc: "zinc",
	neutral: "neutral",
	stone: "stone",
	red: "red",
	orange: "orange",
	amber: "amber",
	yellow: "yellow",
	lime: "lime",
	green: "green",
	emerald: "emerald",
	teal: "teal",
	cyan: "cyan",
	sky: "sky",
	blue: "blue",
	indigo: "indigo",
	violet: "violet",
	purple: "purple",
	fuchsia: "fuchsia",
	pink: "pink",
	rose: "rose",
} as const;

export type PutApiTagsIdBody = {
	/**
	 * The updated text content of the tag
	 * @minLength 1
	 */
	label?: string;
	/** The updated visual variant of the tag */
	variant?: PutApiTagsIdBodyVariant;
	/** The updated color scheme of the tag */
	color?: PutApiTagsIdBodyColor;
	/**
	 * The updated icon for the tag
	 * @nullable
	 */
	icon?: string | null;
	/**
	 * An optional cover image URL for the tag
	 * @nullable
	 */
	cover?: string | null;
	/** Whether the tag should be pinned */
	pinned?: boolean;
};

export type PutApiTagsId200 = {
	message: string;
};

export type PutApiTagsId400 = {
	message: string;
};

export type PutApiTagsId401 = {
	message: string;
};

export type PutApiTagsId404 = {
	message: string;
};

export type PutApiTagsId500 = {
	message: string;
};

export type DeleteApiTagsId200 = {
	message: string;
};

export type DeleteApiTagsId400 = {
	message: string;
};

export type DeleteApiTagsId401 = {
	message: string;
};

export type DeleteApiTagsId404 = {
	message: string;
};

export type DeleteApiTagsId500 = {
	message: string;
};

export type GetApiTagsIdGoalsParams = {
	/**
	 * Filter goals by state (active, archived)
	 */
	state?: GetApiTagsIdGoalsState;
};

export type GetApiTagsIdGoalsState =
	(typeof GetApiTagsIdGoalsState)[keyof typeof GetApiTagsIdGoalsState];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetApiTagsIdGoalsState = {
	active: "active",
	archived: "archived",
} as const;

export type GetApiTagsIdGoals200Item = {
	id: string;
	title: string;
	created_at: string;
	end_date: string;
	/** @nullable */
	icon: string | null;
};

export type GetApiTagsIdGoals400 = {
	message: string;
};

export type GetApiTagsIdGoals401 = {
	message: string;
};

export type GetApiTagsIdGoals500 = {
	message: string;
};

export type GetApiMiscPinned200EntriesItem = {
	id: string;
	title: string;
	pinned: boolean;
	type: string;
	/** @nullable */
	icon: string | null;
};

export type GetApiMiscPinned200GoalsItem = {
	id: string;
	title: string;
	pinned: boolean;
	/** @nullable */
	icon: string | null;
};

export type GetApiMiscPinned200 = {
	entries: GetApiMiscPinned200EntriesItem[];
	goals: GetApiMiscPinned200GoalsItem[];
};

export type GetApiMiscPinned401 = {
	message: string;
};

export type GetApiMiscPinned500 = {
	message: string;
};

/**
 * Generated prompts response ‚Äî always static since we don't have AI
 */
export type GetApiPrompts200 = {
	prompts: string[];
};

export type GetApiPrompts401 = {
	message: string;
};

export type GetApiPrompts500 = {
	message: string;
};

export type GetApiSearchParams = {
	searchTerm: string;
};

export type GetApiSearch200EntriesItem = {
	id: string;
	title: string;
	/** @nullable */
	excerpt: string | null;
	/** @nullable */
	icon: string | null;
	tags: string[];
	updated_at: string;
};

export type GetApiSearch200GoalsItem = {
	id: string;
	title: string;
	/** @nullable */
	description: string | null;
	/** @nullable */
	icon: string | null;
	tags: string[];
	updated_at: string;
};

export type GetApiSearch200LogsItem = {
	id: string;
	/** @nullable */
	goal_id: string | null;
	/** @nullable */
	goal_title: string | null;
	/** @nullable */
	content: string | null;
	updated_at: string;
};

export type GetApiSearch200 = {
	entries: GetApiSearch200EntriesItem[];
	goals: GetApiSearch200GoalsItem[];
	logs: GetApiSearch200LogsItem[];
	hasErrors: boolean;
};

export type GetApiSearch401 = {
	message: string;
};

export type GetApiSearch500 = {
	message: string;
};

/**
 * Get the OpenAPI spec for the Jadebook API. Note, all routes require an authorization header, for which the value can only be accessed on the client.
 * @summary Jadebook OpenAPI Spec
 */
export type getApiDocResponse200 = {
	data: GetApiDoc200;
	status: 200;
};

export type getApiDocResponseComposite = getApiDocResponse200;

export type getApiDocResponse = getApiDocResponseComposite & {
	headers: Headers;
};

export const getGetApiDocUrl = () => {
	return `http://localhost:3000/api/doc`;
};

export const getApiDoc = async (
	options?: RequestInit,
): Promise<getApiDocResponse> => {
	const res = await fetch(getGetApiDocUrl(), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: getApiDocResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiDocResponse;
};

export const getGetApiDocQueryKey = () => {
	return [`http://localhost:3000/api/doc`] as const;
};

export const getGetApiDocInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getApiDoc>>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseInfiniteQueryOptions<
			Awaited<ReturnType<typeof getApiDoc>>,
			TError,
			TData
		>
	>;
	fetch?: RequestInit;
}) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiDocQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDoc>>> = ({
		signal,
	}) => getApiDoc({ signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getApiDoc>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiDocInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiDoc>>
>;
export type GetApiDocInfiniteQueryError = unknown;

export function useGetApiDocInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiDoc>>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiDoc>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiDoc>>,
					TError,
					Awaited<ReturnType<typeof getApiDoc>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiDocInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiDoc>>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiDoc>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiDoc>>,
					TError,
					Awaited<ReturnType<typeof getApiDoc>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiDocInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiDoc>>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiDoc>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Jadebook OpenAPI Spec
 */

export function useGetApiDocInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiDoc>>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiDoc>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiDocInfiniteQueryOptions(options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetApiDocQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiDoc>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiDoc>>, TError, TData>
	>;
	fetch?: RequestInit;
}) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiDocQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDoc>>> = ({
		signal,
	}) => getApiDoc({ signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiDoc>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiDocQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiDoc>>
>;
export type GetApiDocQueryError = unknown;

export function useGetApiDoc<
	TData = Awaited<ReturnType<typeof getApiDoc>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiDoc>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiDoc>>,
					TError,
					Awaited<ReturnType<typeof getApiDoc>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiDoc<
	TData = Awaited<ReturnType<typeof getApiDoc>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiDoc>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiDoc>>,
					TError,
					Awaited<ReturnType<typeof getApiDoc>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiDoc<
	TData = Awaited<ReturnType<typeof getApiDoc>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiDoc>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Jadebook OpenAPI Spec
 */

export function useGetApiDoc<
	TData = Awaited<ReturnType<typeof getApiDoc>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiDoc>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiDocQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Gets the user's profile
 * @summary Get profile
 */
export type getApiProfileResponse200 = {
	data: GetApiProfile200;
	status: 200;
};

export type getApiProfileResponse401 = {
	data: GetApiProfile401;
	status: 401;
};

export type getApiProfileResponse500 = {
	data: GetApiProfile500;
	status: 500;
};

export type getApiProfileResponseComposite =
	| getApiProfileResponse200
	| getApiProfileResponse401
	| getApiProfileResponse500;

export type getApiProfileResponse = getApiProfileResponseComposite & {
	headers: Headers;
};

export const getGetApiProfileUrl = () => {
	return `http://localhost:3000/api/profile`;
};

export const getApiProfile = async (
	options?: RequestInit,
): Promise<getApiProfileResponse> => {
	const res = await fetch(getGetApiProfileUrl(), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: getApiProfileResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiProfileResponse;
};

export const getGetApiProfileQueryKey = () => {
	return [`http://localhost:3000/api/profile`] as const;
};

export const getGetApiProfileInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getApiProfile>>>,
	TError = GetApiProfile401 | GetApiProfile500,
>(options?: {
	query?: Partial<
		UseInfiniteQueryOptions<
			Awaited<ReturnType<typeof getApiProfile>>,
			TError,
			TData
		>
	>;
	fetch?: RequestInit;
}) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiProfileQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProfile>>> = ({
		signal,
	}) => getApiProfile({ signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getApiProfile>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiProfileInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiProfile>>
>;
export type GetApiProfileInfiniteQueryError =
	| GetApiProfile401
	| GetApiProfile500;

export function useGetApiProfileInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiProfile>>>,
	TError = GetApiProfile401 | GetApiProfile500,
>(
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiProfile>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiProfile>>,
					TError,
					Awaited<ReturnType<typeof getApiProfile>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiProfileInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiProfile>>>,
	TError = GetApiProfile401 | GetApiProfile500,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiProfile>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiProfile>>,
					TError,
					Awaited<ReturnType<typeof getApiProfile>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiProfileInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiProfile>>>,
	TError = GetApiProfile401 | GetApiProfile500,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiProfile>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get profile
 */

export function useGetApiProfileInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiProfile>>>,
	TError = GetApiProfile401 | GetApiProfile500,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiProfile>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiProfileInfiniteQueryOptions(options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetApiProfileQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiProfile>>,
	TError = GetApiProfile401 | GetApiProfile500,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiProfile>>, TError, TData>
	>;
	fetch?: RequestInit;
}) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiProfileQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProfile>>> = ({
		signal,
	}) => getApiProfile({ signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiProfile>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiProfileQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiProfile>>
>;
export type GetApiProfileQueryError = GetApiProfile401 | GetApiProfile500;

export function useGetApiProfile<
	TData = Awaited<ReturnType<typeof getApiProfile>>,
	TError = GetApiProfile401 | GetApiProfile500,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiProfile>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiProfile>>,
					TError,
					Awaited<ReturnType<typeof getApiProfile>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiProfile<
	TData = Awaited<ReturnType<typeof getApiProfile>>,
	TError = GetApiProfile401 | GetApiProfile500,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiProfile>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiProfile>>,
					TError,
					Awaited<ReturnType<typeof getApiProfile>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiProfile<
	TData = Awaited<ReturnType<typeof getApiProfile>>,
	TError = GetApiProfile401 | GetApiProfile500,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiProfile>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get profile
 */

export function useGetApiProfile<
	TData = Awaited<ReturnType<typeof getApiProfile>>,
	TError = GetApiProfile401 | GetApiProfile500,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiProfile>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiProfileQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Updates the user's profile
 * @summary Update profile
 */
export type putApiProfileResponse200 = {
	data: PutApiProfile200;
	status: 200;
};

export type putApiProfileResponse400 = {
	data: PutApiProfile400;
	status: 400;
};

export type putApiProfileResponse401 = {
	data: PutApiProfile401;
	status: 401;
};

export type putApiProfileResponse500 = {
	data: PutApiProfile500;
	status: 500;
};

export type putApiProfileResponseComposite =
	| putApiProfileResponse200
	| putApiProfileResponse400
	| putApiProfileResponse401
	| putApiProfileResponse500;

export type putApiProfileResponse = putApiProfileResponseComposite & {
	headers: Headers;
};

export const getPutApiProfileUrl = () => {
	return `http://localhost:3000/api/profile`;
};

export const putApiProfile = async (
	putApiProfileBody: PutApiProfileBody,
	options?: RequestInit,
): Promise<putApiProfileResponse> => {
	const res = await fetch(getPutApiProfileUrl(), {
		...options,
		method: "PUT",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(putApiProfileBody),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: putApiProfileResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as putApiProfileResponse;
};

export const getPutApiProfileMutationOptions = <
	TError = PutApiProfile400 | PutApiProfile401 | PutApiProfile500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof putApiProfile>>,
		TError,
		{ data: PutApiProfileBody },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof putApiProfile>>,
	TError,
	{ data: PutApiProfileBody },
	TContext
> => {
	const mutationKey = ["putApiProfile"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof putApiProfile>>,
		{ data: PutApiProfileBody }
	> = (props) => {
		const { data } = props ?? {};

		return putApiProfile(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PutApiProfileMutationResult = NonNullable<
	Awaited<ReturnType<typeof putApiProfile>>
>;
export type PutApiProfileMutationBody = PutApiProfileBody;
export type PutApiProfileMutationError =
	| PutApiProfile400
	| PutApiProfile401
	| PutApiProfile500;

/**
 * @summary Update profile
 */
export const usePutApiProfile = <
	TError = PutApiProfile400 | PutApiProfile401 | PutApiProfile500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof putApiProfile>>,
			TError,
			{ data: PutApiProfileBody },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof putApiProfile>>,
	TError,
	{ data: PutApiProfileBody },
	TContext
> => {
	const mutationOptions = getPutApiProfileMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Gets a list of assets for the authenticated user. Can be filtered by entity type and entity ID.
 * @summary Get assets
 */
export type getApiAssetsResponse200 = {
	data: GetApiAssets200;
	status: 200;
};

export type getApiAssetsResponse400 = {
	data: GetApiAssets400;
	status: 400;
};

export type getApiAssetsResponse401 = {
	data: GetApiAssets401;
	status: 401;
};

export type getApiAssetsResponse500 = {
	data: GetApiAssets500;
	status: 500;
};

export type getApiAssetsResponseComposite =
	| getApiAssetsResponse200
	| getApiAssetsResponse400
	| getApiAssetsResponse401
	| getApiAssetsResponse500;

export type getApiAssetsResponse = getApiAssetsResponseComposite & {
	headers: Headers;
};

export const getGetApiAssetsUrl = (params?: GetApiAssetsParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? "null" : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `http://localhost:3000/api/assets?${stringifiedParams}`
		: `http://localhost:3000/api/assets`;
};

export const getApiAssets = async (
	params?: GetApiAssetsParams,
	options?: RequestInit,
): Promise<getApiAssetsResponse> => {
	const res = await fetch(getGetApiAssetsUrl(params), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: getApiAssetsResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiAssetsResponse;
};

export const getGetApiAssetsQueryKey = (params?: GetApiAssetsParams) => {
	return [
		`http://localhost:3000/api/assets`,
		...(params ? [params] : []),
	] as const;
};

export const getGetApiAssetsInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getApiAssets>>>,
	TError = GetApiAssets400 | GetApiAssets401 | GetApiAssets500,
>(
	params?: GetApiAssetsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiAssets>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiAssetsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAssets>>> = ({
		signal,
	}) => getApiAssets(params, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getApiAssets>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiAssetsInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiAssets>>
>;
export type GetApiAssetsInfiniteQueryError =
	| GetApiAssets400
	| GetApiAssets401
	| GetApiAssets500;

export function useGetApiAssetsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiAssets>>>,
	TError = GetApiAssets400 | GetApiAssets401 | GetApiAssets500,
>(
	params: undefined | GetApiAssetsParams,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiAssets>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiAssets>>,
					TError,
					Awaited<ReturnType<typeof getApiAssets>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAssetsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiAssets>>>,
	TError = GetApiAssets400 | GetApiAssets401 | GetApiAssets500,
>(
	params?: GetApiAssetsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiAssets>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiAssets>>,
					TError,
					Awaited<ReturnType<typeof getApiAssets>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAssetsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiAssets>>>,
	TError = GetApiAssets400 | GetApiAssets401 | GetApiAssets500,
>(
	params?: GetApiAssetsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiAssets>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get assets
 */

export function useGetApiAssetsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiAssets>>>,
	TError = GetApiAssets400 | GetApiAssets401 | GetApiAssets500,
>(
	params?: GetApiAssetsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiAssets>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiAssetsInfiniteQueryOptions(params, options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetApiAssetsQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiAssets>>,
	TError = GetApiAssets400 | GetApiAssets401 | GetApiAssets500,
>(
	params?: GetApiAssetsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiAssets>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiAssetsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAssets>>> = ({
		signal,
	}) => getApiAssets(params, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiAssets>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiAssetsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiAssets>>
>;
export type GetApiAssetsQueryError =
	| GetApiAssets400
	| GetApiAssets401
	| GetApiAssets500;

export function useGetApiAssets<
	TData = Awaited<ReturnType<typeof getApiAssets>>,
	TError = GetApiAssets400 | GetApiAssets401 | GetApiAssets500,
>(
	params: undefined | GetApiAssetsParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiAssets>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiAssets>>,
					TError,
					Awaited<ReturnType<typeof getApiAssets>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAssets<
	TData = Awaited<ReturnType<typeof getApiAssets>>,
	TError = GetApiAssets400 | GetApiAssets401 | GetApiAssets500,
>(
	params?: GetApiAssetsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiAssets>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiAssets>>,
					TError,
					Awaited<ReturnType<typeof getApiAssets>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAssets<
	TData = Awaited<ReturnType<typeof getApiAssets>>,
	TError = GetApiAssets400 | GetApiAssets401 | GetApiAssets500,
>(
	params?: GetApiAssetsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiAssets>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get assets
 */

export function useGetApiAssets<
	TData = Awaited<ReturnType<typeof getApiAssets>>,
	TError = GetApiAssets400 | GetApiAssets401 | GetApiAssets500,
>(
	params?: GetApiAssetsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiAssets>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiAssetsQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Creates a new asset record in the database
 * @summary Create asset
 */
export type postApiAssetsResponse201 = {
	data: PostApiAssets201;
	status: 201;
};

export type postApiAssetsResponse400 = {
	data: PostApiAssets400;
	status: 400;
};

export type postApiAssetsResponse401 = {
	data: PostApiAssets401;
	status: 401;
};

export type postApiAssetsResponse500 = {
	data: PostApiAssets500;
	status: 500;
};

export type postApiAssetsResponseComposite =
	| postApiAssetsResponse201
	| postApiAssetsResponse400
	| postApiAssetsResponse401
	| postApiAssetsResponse500;

export type postApiAssetsResponse = postApiAssetsResponseComposite & {
	headers: Headers;
};

export const getPostApiAssetsUrl = () => {
	return `http://localhost:3000/api/assets`;
};

export const postApiAssets = async (
	postApiAssetsBody: PostApiAssetsBody,
	options?: RequestInit,
): Promise<postApiAssetsResponse> => {
	const res = await fetch(getPostApiAssetsUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(postApiAssetsBody),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: postApiAssetsResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as postApiAssetsResponse;
};

export const getPostApiAssetsMutationOptions = <
	TError = PostApiAssets400 | PostApiAssets401 | PostApiAssets500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postApiAssets>>,
		TError,
		{ data: PostApiAssetsBody },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postApiAssets>>,
	TError,
	{ data: PostApiAssetsBody },
	TContext
> => {
	const mutationKey = ["postApiAssets"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postApiAssets>>,
		{ data: PostApiAssetsBody }
	> = (props) => {
		const { data } = props ?? {};

		return postApiAssets(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostApiAssetsMutationResult = NonNullable<
	Awaited<ReturnType<typeof postApiAssets>>
>;
export type PostApiAssetsMutationBody = PostApiAssetsBody;
export type PostApiAssetsMutationError =
	| PostApiAssets400
	| PostApiAssets401
	| PostApiAssets500;

/**
 * @summary Create asset
 */
export const usePostApiAssets = <
	TError = PostApiAssets400 | PostApiAssets401 | PostApiAssets500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof postApiAssets>>,
			TError,
			{ data: PostApiAssetsBody },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof postApiAssets>>,
	TError,
	{ data: PostApiAssetsBody },
	TContext
> => {
	const mutationOptions = getPostApiAssetsMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Gets a single asset by ID
 * @summary Get asset
 */
export type getApiAssetsIdResponse200 = {
	data: GetApiAssetsId200;
	status: 200;
};

export type getApiAssetsIdResponse400 = {
	data: GetApiAssetsId400;
	status: 400;
};

export type getApiAssetsIdResponse401 = {
	data: GetApiAssetsId401;
	status: 401;
};

export type getApiAssetsIdResponse404 = {
	data: GetApiAssetsId404;
	status: 404;
};

export type getApiAssetsIdResponse500 = {
	data: GetApiAssetsId500;
	status: 500;
};

export type getApiAssetsIdResponseComposite =
	| getApiAssetsIdResponse200
	| getApiAssetsIdResponse400
	| getApiAssetsIdResponse401
	| getApiAssetsIdResponse404
	| getApiAssetsIdResponse500;

export type getApiAssetsIdResponse = getApiAssetsIdResponseComposite & {
	headers: Headers;
};

export const getGetApiAssetsIdUrl = (id: string) => {
	return `http://localhost:3000/api/assets/${id}`;
};

export const getApiAssetsId = async (
	id: string,
	options?: RequestInit,
): Promise<getApiAssetsIdResponse> => {
	const res = await fetch(getGetApiAssetsIdUrl(id), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: getApiAssetsIdResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiAssetsIdResponse;
};

export const getGetApiAssetsIdQueryKey = (id: string) => {
	return [`http://localhost:3000/api/assets/${id}`] as const;
};

export const getGetApiAssetsIdInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getApiAssetsId>>>,
	TError =
		| GetApiAssetsId400
		| GetApiAssetsId401
		| GetApiAssetsId404
		| GetApiAssetsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiAssetsId>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiAssetsIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAssetsId>>> = ({
		signal,
	}) => getApiAssetsId(id, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getApiAssetsId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiAssetsIdInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiAssetsId>>
>;
export type GetApiAssetsIdInfiniteQueryError =
	| GetApiAssetsId400
	| GetApiAssetsId401
	| GetApiAssetsId404
	| GetApiAssetsId500;

export function useGetApiAssetsIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiAssetsId>>>,
	TError =
		| GetApiAssetsId400
		| GetApiAssetsId401
		| GetApiAssetsId404
		| GetApiAssetsId500,
>(
	id: string,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiAssetsId>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiAssetsId>>,
					TError,
					Awaited<ReturnType<typeof getApiAssetsId>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAssetsIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiAssetsId>>>,
	TError =
		| GetApiAssetsId400
		| GetApiAssetsId401
		| GetApiAssetsId404
		| GetApiAssetsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiAssetsId>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiAssetsId>>,
					TError,
					Awaited<ReturnType<typeof getApiAssetsId>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAssetsIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiAssetsId>>>,
	TError =
		| GetApiAssetsId400
		| GetApiAssetsId401
		| GetApiAssetsId404
		| GetApiAssetsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiAssetsId>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get asset
 */

export function useGetApiAssetsIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiAssetsId>>>,
	TError =
		| GetApiAssetsId400
		| GetApiAssetsId401
		| GetApiAssetsId404
		| GetApiAssetsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiAssetsId>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiAssetsIdInfiniteQueryOptions(id, options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetApiAssetsIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiAssetsId>>,
	TError =
		| GetApiAssetsId400
		| GetApiAssetsId401
		| GetApiAssetsId404
		| GetApiAssetsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiAssetsId>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiAssetsIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAssetsId>>> = ({
		signal,
	}) => getApiAssetsId(id, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getApiAssetsId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiAssetsIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiAssetsId>>
>;
export type GetApiAssetsIdQueryError =
	| GetApiAssetsId400
	| GetApiAssetsId401
	| GetApiAssetsId404
	| GetApiAssetsId500;

export function useGetApiAssetsId<
	TData = Awaited<ReturnType<typeof getApiAssetsId>>,
	TError =
		| GetApiAssetsId400
		| GetApiAssetsId401
		| GetApiAssetsId404
		| GetApiAssetsId500,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiAssetsId>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiAssetsId>>,
					TError,
					Awaited<ReturnType<typeof getApiAssetsId>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAssetsId<
	TData = Awaited<ReturnType<typeof getApiAssetsId>>,
	TError =
		| GetApiAssetsId400
		| GetApiAssetsId401
		| GetApiAssetsId404
		| GetApiAssetsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiAssetsId>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiAssetsId>>,
					TError,
					Awaited<ReturnType<typeof getApiAssetsId>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAssetsId<
	TData = Awaited<ReturnType<typeof getApiAssetsId>>,
	TError =
		| GetApiAssetsId400
		| GetApiAssetsId401
		| GetApiAssetsId404
		| GetApiAssetsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiAssetsId>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get asset
 */

export function useGetApiAssetsId<
	TData = Awaited<ReturnType<typeof getApiAssetsId>>,
	TError =
		| GetApiAssetsId400
		| GetApiAssetsId401
		| GetApiAssetsId404
		| GetApiAssetsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiAssetsId>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiAssetsIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Updates an asset record. Supports partial updates.
 * @summary Update asset
 */
export type putApiAssetsIdResponse200 = {
	data: PutApiAssetsId200;
	status: 200;
};

export type putApiAssetsIdResponse400 = {
	data: PutApiAssetsId400;
	status: 400;
};

export type putApiAssetsIdResponse401 = {
	data: PutApiAssetsId401;
	status: 401;
};

export type putApiAssetsIdResponse404 = {
	data: PutApiAssetsId404;
	status: 404;
};

export type putApiAssetsIdResponse500 = {
	data: PutApiAssetsId500;
	status: 500;
};

export type putApiAssetsIdResponseComposite =
	| putApiAssetsIdResponse200
	| putApiAssetsIdResponse400
	| putApiAssetsIdResponse401
	| putApiAssetsIdResponse404
	| putApiAssetsIdResponse500;

export type putApiAssetsIdResponse = putApiAssetsIdResponseComposite & {
	headers: Headers;
};

export const getPutApiAssetsIdUrl = (id: string) => {
	return `http://localhost:3000/api/assets/${id}`;
};

export const putApiAssetsId = async (
	id: string,
	putApiAssetsIdBody: PutApiAssetsIdBody,
	options?: RequestInit,
): Promise<putApiAssetsIdResponse> => {
	const res = await fetch(getPutApiAssetsIdUrl(id), {
		...options,
		method: "PUT",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(putApiAssetsIdBody),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: putApiAssetsIdResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as putApiAssetsIdResponse;
};

export const getPutApiAssetsIdMutationOptions = <
	TError =
		| PutApiAssetsId400
		| PutApiAssetsId401
		| PutApiAssetsId404
		| PutApiAssetsId500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof putApiAssetsId>>,
		TError,
		{ id: string; data: PutApiAssetsIdBody },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof putApiAssetsId>>,
	TError,
	{ id: string; data: PutApiAssetsIdBody },
	TContext
> => {
	const mutationKey = ["putApiAssetsId"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof putApiAssetsId>>,
		{ id: string; data: PutApiAssetsIdBody }
	> = (props) => {
		const { id, data } = props ?? {};

		return putApiAssetsId(id, data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PutApiAssetsIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof putApiAssetsId>>
>;
export type PutApiAssetsIdMutationBody = PutApiAssetsIdBody;
export type PutApiAssetsIdMutationError =
	| PutApiAssetsId400
	| PutApiAssetsId401
	| PutApiAssetsId404
	| PutApiAssetsId500;

/**
 * @summary Update asset
 */
export const usePutApiAssetsId = <
	TError =
		| PutApiAssetsId400
		| PutApiAssetsId401
		| PutApiAssetsId404
		| PutApiAssetsId500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof putApiAssetsId>>,
			TError,
			{ id: string; data: PutApiAssetsIdBody },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof putApiAssetsId>>,
	TError,
	{ id: string; data: PutApiAssetsIdBody },
	TContext
> => {
	const mutationOptions = getPutApiAssetsIdMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Deletes an asset from both storage and database
 * @summary Delete asset
 */
export type deleteApiAssetsIdResponse200 = {
	data: DeleteApiAssetsId200;
	status: 200;
};

export type deleteApiAssetsIdResponse400 = {
	data: DeleteApiAssetsId400;
	status: 400;
};

export type deleteApiAssetsIdResponse401 = {
	data: DeleteApiAssetsId401;
	status: 401;
};

export type deleteApiAssetsIdResponse404 = {
	data: DeleteApiAssetsId404;
	status: 404;
};

export type deleteApiAssetsIdResponse500 = {
	data: DeleteApiAssetsId500;
	status: 500;
};

export type deleteApiAssetsIdResponseComposite =
	| deleteApiAssetsIdResponse200
	| deleteApiAssetsIdResponse400
	| deleteApiAssetsIdResponse401
	| deleteApiAssetsIdResponse404
	| deleteApiAssetsIdResponse500;

export type deleteApiAssetsIdResponse = deleteApiAssetsIdResponseComposite & {
	headers: Headers;
};

export const getDeleteApiAssetsIdUrl = (id: string) => {
	return `http://localhost:3000/api/assets/${id}`;
};

export const deleteApiAssetsId = async (
	id: string,
	deleteApiAssetsIdBody: DeleteApiAssetsIdBody,
	options?: RequestInit,
): Promise<deleteApiAssetsIdResponse> => {
	const res = await fetch(getDeleteApiAssetsIdUrl(id), {
		...options,
		method: "DELETE",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(deleteApiAssetsIdBody),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: deleteApiAssetsIdResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as deleteApiAssetsIdResponse;
};

export const getDeleteApiAssetsIdMutationOptions = <
	TError =
		| DeleteApiAssetsId400
		| DeleteApiAssetsId401
		| DeleteApiAssetsId404
		| DeleteApiAssetsId500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteApiAssetsId>>,
		TError,
		{ id: string; data: DeleteApiAssetsIdBody },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteApiAssetsId>>,
	TError,
	{ id: string; data: DeleteApiAssetsIdBody },
	TContext
> => {
	const mutationKey = ["deleteApiAssetsId"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteApiAssetsId>>,
		{ id: string; data: DeleteApiAssetsIdBody }
	> = (props) => {
		const { id, data } = props ?? {};

		return deleteApiAssetsId(id, data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteApiAssetsIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteApiAssetsId>>
>;
export type DeleteApiAssetsIdMutationBody = DeleteApiAssetsIdBody;
export type DeleteApiAssetsIdMutationError =
	| DeleteApiAssetsId400
	| DeleteApiAssetsId401
	| DeleteApiAssetsId404
	| DeleteApiAssetsId500;

/**
 * @summary Delete asset
 */
export const useDeleteApiAssetsId = <
	TError =
		| DeleteApiAssetsId400
		| DeleteApiAssetsId401
		| DeleteApiAssetsId404
		| DeleteApiAssetsId500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteApiAssetsId>>,
			TError,
			{ id: string; data: DeleteApiAssetsIdBody },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteApiAssetsId>>,
	TError,
	{ id: string; data: DeleteApiAssetsIdBody },
	TContext
> => {
	const mutationOptions = getDeleteApiAssetsIdMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Generates a signed URL for accessing a file in storage
 * @summary Generate signed URL
 */
export type postApiAssetsSignedUrlResponse200 = {
	data: PostApiAssetsSignedUrl200;
	status: 200;
};

export type postApiAssetsSignedUrlResponse400 = {
	data: PostApiAssetsSignedUrl400;
	status: 400;
};

export type postApiAssetsSignedUrlResponse401 = {
	data: PostApiAssetsSignedUrl401;
	status: 401;
};

export type postApiAssetsSignedUrlResponse500 = {
	data: PostApiAssetsSignedUrl500;
	status: 500;
};

export type postApiAssetsSignedUrlResponseComposite =
	| postApiAssetsSignedUrlResponse200
	| postApiAssetsSignedUrlResponse400
	| postApiAssetsSignedUrlResponse401
	| postApiAssetsSignedUrlResponse500;

export type postApiAssetsSignedUrlResponse =
	postApiAssetsSignedUrlResponseComposite & {
		headers: Headers;
	};

export const getPostApiAssetsSignedUrlUrl = () => {
	return `http://localhost:3000/api/assets/signed-url`;
};

export const postApiAssetsSignedUrl = async (
	postApiAssetsSignedUrlBody: PostApiAssetsSignedUrlBody,
	options?: RequestInit,
): Promise<postApiAssetsSignedUrlResponse> => {
	const res = await fetch(getPostApiAssetsSignedUrlUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(postApiAssetsSignedUrlBody),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: postApiAssetsSignedUrlResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as postApiAssetsSignedUrlResponse;
};

export const getPostApiAssetsSignedUrlMutationOptions = <
	TError =
		| PostApiAssetsSignedUrl400
		| PostApiAssetsSignedUrl401
		| PostApiAssetsSignedUrl500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postApiAssetsSignedUrl>>,
		TError,
		{ data: PostApiAssetsSignedUrlBody },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postApiAssetsSignedUrl>>,
	TError,
	{ data: PostApiAssetsSignedUrlBody },
	TContext
> => {
	const mutationKey = ["postApiAssetsSignedUrl"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postApiAssetsSignedUrl>>,
		{ data: PostApiAssetsSignedUrlBody }
	> = (props) => {
		const { data } = props ?? {};

		return postApiAssetsSignedUrl(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostApiAssetsSignedUrlMutationResult = NonNullable<
	Awaited<ReturnType<typeof postApiAssetsSignedUrl>>
>;
export type PostApiAssetsSignedUrlMutationBody = PostApiAssetsSignedUrlBody;
export type PostApiAssetsSignedUrlMutationError =
	| PostApiAssetsSignedUrl400
	| PostApiAssetsSignedUrl401
	| PostApiAssetsSignedUrl500;

/**
 * @summary Generate signed URL
 */
export const usePostApiAssetsSignedUrl = <
	TError =
		| PostApiAssetsSignedUrl400
		| PostApiAssetsSignedUrl401
		| PostApiAssetsSignedUrl500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof postApiAssetsSignedUrl>>,
			TError,
			{ data: PostApiAssetsSignedUrlBody },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof postApiAssetsSignedUrl>>,
	TError,
	{ data: PostApiAssetsSignedUrlBody },
	TContext
> => {
	const mutationOptions = getPostApiAssetsSignedUrlMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Uploads a file to storage and creates an asset record
 * @summary Upload file
 */
export type postApiAssetsUploadResponse201 = {
	data: PostApiAssetsUpload201;
	status: 201;
};

export type postApiAssetsUploadResponse400 = {
	data: PostApiAssetsUpload400;
	status: 400;
};

export type postApiAssetsUploadResponse401 = {
	data: PostApiAssetsUpload401;
	status: 401;
};

export type postApiAssetsUploadResponse500 = {
	data: PostApiAssetsUpload500;
	status: 500;
};

export type postApiAssetsUploadResponseComposite =
	| postApiAssetsUploadResponse201
	| postApiAssetsUploadResponse400
	| postApiAssetsUploadResponse401
	| postApiAssetsUploadResponse500;

export type postApiAssetsUploadResponse =
	postApiAssetsUploadResponseComposite & {
		headers: Headers;
	};

export const getPostApiAssetsUploadUrl = () => {
	return `http://localhost:3000/api/assets/upload`;
};

export const postApiAssetsUpload = async (
	postApiAssetsUploadBody: PostApiAssetsUploadBody,
	options?: RequestInit,
): Promise<postApiAssetsUploadResponse> => {
	const formData = new FormData();
	if (postApiAssetsUploadBody.file !== undefined) {
		formData.append(`file`, postApiAssetsUploadBody.file);
	}
	formData.append(`entity_type`, postApiAssetsUploadBody.entity_type);
	formData.append(`entity_id`, postApiAssetsUploadBody.entity_id);

	const res = await fetch(getPostApiAssetsUploadUrl(), {
		...options,
		method: "POST",
		body: formData,
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: postApiAssetsUploadResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as postApiAssetsUploadResponse;
};

export const getPostApiAssetsUploadMutationOptions = <
	TError =
		| PostApiAssetsUpload400
		| PostApiAssetsUpload401
		| PostApiAssetsUpload500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postApiAssetsUpload>>,
		TError,
		{ data: PostApiAssetsUploadBody },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postApiAssetsUpload>>,
	TError,
	{ data: PostApiAssetsUploadBody },
	TContext
> => {
	const mutationKey = ["postApiAssetsUpload"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postApiAssetsUpload>>,
		{ data: PostApiAssetsUploadBody }
	> = (props) => {
		const { data } = props ?? {};

		return postApiAssetsUpload(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostApiAssetsUploadMutationResult = NonNullable<
	Awaited<ReturnType<typeof postApiAssetsUpload>>
>;
export type PostApiAssetsUploadMutationBody = PostApiAssetsUploadBody;
export type PostApiAssetsUploadMutationError =
	| PostApiAssetsUpload400
	| PostApiAssetsUpload401
	| PostApiAssetsUpload500;

/**
 * @summary Upload file
 */
export const usePostApiAssetsUpload = <
	TError =
		| PostApiAssetsUpload400
		| PostApiAssetsUpload401
		| PostApiAssetsUpload500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof postApiAssetsUpload>>,
			TError,
			{ data: PostApiAssetsUploadBody },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof postApiAssetsUpload>>,
	TError,
	{ data: PostApiAssetsUploadBody },
	TContext
> => {
	const mutationOptions = getPostApiAssetsUploadMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Gets a list of entries with pagination. Can be filtered by type, date, and tag id.
 * @summary Get entries
 */
export type getApiEntriesResponse200 = {
	data: GetApiEntries200;
	status: 200;
};

export type getApiEntriesResponse400 = {
	data: GetApiEntries400;
	status: 400;
};

export type getApiEntriesResponse401 = {
	data: GetApiEntries401;
	status: 401;
};

export type getApiEntriesResponse500 = {
	data: GetApiEntries500;
	status: 500;
};

export type getApiEntriesResponseComposite =
	| getApiEntriesResponse200
	| getApiEntriesResponse400
	| getApiEntriesResponse401
	| getApiEntriesResponse500;

export type getApiEntriesResponse = getApiEntriesResponseComposite & {
	headers: Headers;
};

export const getGetApiEntriesUrl = (params?: GetApiEntriesParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? "null" : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `http://localhost:3000/api/entries?${stringifiedParams}`
		: `http://localhost:3000/api/entries`;
};

export const getApiEntries = async (
	params?: GetApiEntriesParams,
	options?: RequestInit,
): Promise<getApiEntriesResponse> => {
	const res = await fetch(getGetApiEntriesUrl(params), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: getApiEntriesResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiEntriesResponse;
};

export const getGetApiEntriesQueryKey = (params?: GetApiEntriesParams) => {
	return [
		`http://localhost:3000/api/entries`,
		...(params ? [params] : []),
	] as const;
};

export const getGetApiEntriesInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getApiEntries>>>,
	TError = GetApiEntries400 | GetApiEntries401 | GetApiEntries500,
>(
	params?: GetApiEntriesParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiEntries>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiEntriesQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEntries>>> = ({
		signal,
	}) => getApiEntries(params, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getApiEntries>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiEntriesInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiEntries>>
>;
export type GetApiEntriesInfiniteQueryError =
	| GetApiEntries400
	| GetApiEntries401
	| GetApiEntries500;

export function useGetApiEntriesInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiEntries>>>,
	TError = GetApiEntries400 | GetApiEntries401 | GetApiEntries500,
>(
	params: undefined | GetApiEntriesParams,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiEntries>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiEntries>>,
					TError,
					Awaited<ReturnType<typeof getApiEntries>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEntriesInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiEntries>>>,
	TError = GetApiEntries400 | GetApiEntries401 | GetApiEntries500,
>(
	params?: GetApiEntriesParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiEntries>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiEntries>>,
					TError,
					Awaited<ReturnType<typeof getApiEntries>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEntriesInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiEntries>>>,
	TError = GetApiEntries400 | GetApiEntries401 | GetApiEntries500,
>(
	params?: GetApiEntriesParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiEntries>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get entries
 */

export function useGetApiEntriesInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiEntries>>>,
	TError = GetApiEntries400 | GetApiEntries401 | GetApiEntries500,
>(
	params?: GetApiEntriesParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiEntries>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiEntriesInfiniteQueryOptions(params, options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetApiEntriesQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiEntries>>,
	TError = GetApiEntries400 | GetApiEntries401 | GetApiEntries500,
>(
	params?: GetApiEntriesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiEntries>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiEntriesQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEntries>>> = ({
		signal,
	}) => getApiEntries(params, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiEntries>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiEntriesQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiEntries>>
>;
export type GetApiEntriesQueryError =
	| GetApiEntries400
	| GetApiEntries401
	| GetApiEntries500;

export function useGetApiEntries<
	TData = Awaited<ReturnType<typeof getApiEntries>>,
	TError = GetApiEntries400 | GetApiEntries401 | GetApiEntries500,
>(
	params: undefined | GetApiEntriesParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiEntries>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiEntries>>,
					TError,
					Awaited<ReturnType<typeof getApiEntries>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEntries<
	TData = Awaited<ReturnType<typeof getApiEntries>>,
	TError = GetApiEntries400 | GetApiEntries401 | GetApiEntries500,
>(
	params?: GetApiEntriesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiEntries>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiEntries>>,
					TError,
					Awaited<ReturnType<typeof getApiEntries>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEntries<
	TData = Awaited<ReturnType<typeof getApiEntries>>,
	TError = GetApiEntries400 | GetApiEntries401 | GetApiEntries500,
>(
	params?: GetApiEntriesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiEntries>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get entries
 */

export function useGetApiEntries<
	TData = Awaited<ReturnType<typeof getApiEntries>>,
	TError = GetApiEntries400 | GetApiEntries401 | GetApiEntries500,
>(
	params?: GetApiEntriesParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiEntries>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiEntriesQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Creates a new entry
 * @summary Create entry
 */
export type postApiEntriesResponse201 = {
	data: PostApiEntries201;
	status: 201;
};

export type postApiEntriesResponse400 = {
	data: PostApiEntries400;
	status: 400;
};

export type postApiEntriesResponse401 = {
	data: PostApiEntries401;
	status: 401;
};

export type postApiEntriesResponse500 = {
	data: PostApiEntries500;
	status: 500;
};

export type postApiEntriesResponseComposite =
	| postApiEntriesResponse201
	| postApiEntriesResponse400
	| postApiEntriesResponse401
	| postApiEntriesResponse500;

export type postApiEntriesResponse = postApiEntriesResponseComposite & {
	headers: Headers;
};

export const getPostApiEntriesUrl = () => {
	return `http://localhost:3000/api/entries`;
};

export const postApiEntries = async (
	postApiEntriesBody: PostApiEntriesBody,
	options?: RequestInit,
): Promise<postApiEntriesResponse> => {
	const res = await fetch(getPostApiEntriesUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(postApiEntriesBody),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: postApiEntriesResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as postApiEntriesResponse;
};

export const getPostApiEntriesMutationOptions = <
	TError = PostApiEntries400 | PostApiEntries401 | PostApiEntries500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postApiEntries>>,
		TError,
		{ data: PostApiEntriesBody },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postApiEntries>>,
	TError,
	{ data: PostApiEntriesBody },
	TContext
> => {
	const mutationKey = ["postApiEntries"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postApiEntries>>,
		{ data: PostApiEntriesBody }
	> = (props) => {
		const { data } = props ?? {};

		return postApiEntries(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostApiEntriesMutationResult = NonNullable<
	Awaited<ReturnType<typeof postApiEntries>>
>;
export type PostApiEntriesMutationBody = PostApiEntriesBody;
export type PostApiEntriesMutationError =
	| PostApiEntries400
	| PostApiEntries401
	| PostApiEntries500;

/**
 * @summary Create entry
 */
export const usePostApiEntries = <
	TError = PostApiEntries400 | PostApiEntries401 | PostApiEntries500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof postApiEntries>>,
			TError,
			{ data: PostApiEntriesBody },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof postApiEntries>>,
	TError,
	{ data: PostApiEntriesBody },
	TContext
> => {
	const mutationOptions = getPostApiEntriesMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Gets a single entry by ID ‚Äî Search Vector will not be returned. Will also return deleted entries.
 * @summary Get entry
 */
export type getApiEntriesIdResponse200 = {
	data: GetApiEntriesId200;
	status: 200;
};

export type getApiEntriesIdResponse400 = {
	data: GetApiEntriesId400;
	status: 400;
};

export type getApiEntriesIdResponse401 = {
	data: GetApiEntriesId401;
	status: 401;
};

export type getApiEntriesIdResponse404 = {
	data: GetApiEntriesId404;
	status: 404;
};

export type getApiEntriesIdResponse500 = {
	data: GetApiEntriesId500;
	status: 500;
};

export type getApiEntriesIdResponseComposite =
	| getApiEntriesIdResponse200
	| getApiEntriesIdResponse400
	| getApiEntriesIdResponse401
	| getApiEntriesIdResponse404
	| getApiEntriesIdResponse500;

export type getApiEntriesIdResponse = getApiEntriesIdResponseComposite & {
	headers: Headers;
};

export const getGetApiEntriesIdUrl = (id: string) => {
	return `http://localhost:3000/api/entries/${id}`;
};

export const getApiEntriesId = async (
	id: string,
	options?: RequestInit,
): Promise<getApiEntriesIdResponse> => {
	const res = await fetch(getGetApiEntriesIdUrl(id), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: getApiEntriesIdResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiEntriesIdResponse;
};

export const getGetApiEntriesIdQueryKey = (id: string) => {
	return [`http://localhost:3000/api/entries/${id}`] as const;
};

export const getGetApiEntriesIdInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getApiEntriesId>>>,
	TError =
		| GetApiEntriesId400
		| GetApiEntriesId401
		| GetApiEntriesId404
		| GetApiEntriesId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesId>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiEntriesIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEntriesId>>> = ({
		signal,
	}) => getApiEntriesId(id, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getApiEntriesId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiEntriesIdInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiEntriesId>>
>;
export type GetApiEntriesIdInfiniteQueryError =
	| GetApiEntriesId400
	| GetApiEntriesId401
	| GetApiEntriesId404
	| GetApiEntriesId500;

export function useGetApiEntriesIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiEntriesId>>>,
	TError =
		| GetApiEntriesId400
		| GetApiEntriesId401
		| GetApiEntriesId404
		| GetApiEntriesId500,
>(
	id: string,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesId>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiEntriesId>>,
					TError,
					Awaited<ReturnType<typeof getApiEntriesId>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEntriesIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiEntriesId>>>,
	TError =
		| GetApiEntriesId400
		| GetApiEntriesId401
		| GetApiEntriesId404
		| GetApiEntriesId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesId>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiEntriesId>>,
					TError,
					Awaited<ReturnType<typeof getApiEntriesId>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEntriesIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiEntriesId>>>,
	TError =
		| GetApiEntriesId400
		| GetApiEntriesId401
		| GetApiEntriesId404
		| GetApiEntriesId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesId>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get entry
 */

export function useGetApiEntriesIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiEntriesId>>>,
	TError =
		| GetApiEntriesId400
		| GetApiEntriesId401
		| GetApiEntriesId404
		| GetApiEntriesId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesId>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiEntriesIdInfiniteQueryOptions(id, options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetApiEntriesIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiEntriesId>>,
	TError =
		| GetApiEntriesId400
		| GetApiEntriesId401
		| GetApiEntriesId404
		| GetApiEntriesId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesId>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiEntriesIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiEntriesId>>> = ({
		signal,
	}) => getApiEntriesId(id, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getApiEntriesId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiEntriesIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiEntriesId>>
>;
export type GetApiEntriesIdQueryError =
	| GetApiEntriesId400
	| GetApiEntriesId401
	| GetApiEntriesId404
	| GetApiEntriesId500;

export function useGetApiEntriesId<
	TData = Awaited<ReturnType<typeof getApiEntriesId>>,
	TError =
		| GetApiEntriesId400
		| GetApiEntriesId401
		| GetApiEntriesId404
		| GetApiEntriesId500,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesId>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiEntriesId>>,
					TError,
					Awaited<ReturnType<typeof getApiEntriesId>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEntriesId<
	TData = Awaited<ReturnType<typeof getApiEntriesId>>,
	TError =
		| GetApiEntriesId400
		| GetApiEntriesId401
		| GetApiEntriesId404
		| GetApiEntriesId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesId>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiEntriesId>>,
					TError,
					Awaited<ReturnType<typeof getApiEntriesId>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEntriesId<
	TData = Awaited<ReturnType<typeof getApiEntriesId>>,
	TError =
		| GetApiEntriesId400
		| GetApiEntriesId401
		| GetApiEntriesId404
		| GetApiEntriesId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesId>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get entry
 */

export function useGetApiEntriesId<
	TData = Awaited<ReturnType<typeof getApiEntriesId>>,
	TError =
		| GetApiEntriesId400
		| GetApiEntriesId401
		| GetApiEntriesId404
		| GetApiEntriesId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesId>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiEntriesIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Updates an entry ‚Äî internally handles embeddings and text extraction from the editor content. Notes are not supported since they will be deprecated.
 * @summary Update entry
 */
export type putApiEntriesIdResponse200 = {
	data: PutApiEntriesId200;
	status: 200;
};

export type putApiEntriesIdResponse400 = {
	data: PutApiEntriesId400;
	status: 400;
};

export type putApiEntriesIdResponse401 = {
	data: PutApiEntriesId401;
	status: 401;
};

export type putApiEntriesIdResponse404 = {
	data: PutApiEntriesId404;
	status: 404;
};

export type putApiEntriesIdResponse500 = {
	data: PutApiEntriesId500;
	status: 500;
};

export type putApiEntriesIdResponseComposite =
	| putApiEntriesIdResponse200
	| putApiEntriesIdResponse400
	| putApiEntriesIdResponse401
	| putApiEntriesIdResponse404
	| putApiEntriesIdResponse500;

export type putApiEntriesIdResponse = putApiEntriesIdResponseComposite & {
	headers: Headers;
};

export const getPutApiEntriesIdUrl = (id: string) => {
	return `http://localhost:3000/api/entries/${id}`;
};

export const putApiEntriesId = async (
	id: string,
	putApiEntriesIdBody: PutApiEntriesIdBody,
	options?: RequestInit,
): Promise<putApiEntriesIdResponse> => {
	const res = await fetch(getPutApiEntriesIdUrl(id), {
		...options,
		method: "PUT",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(putApiEntriesIdBody),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: putApiEntriesIdResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as putApiEntriesIdResponse;
};

export const getPutApiEntriesIdMutationOptions = <
	TError =
		| PutApiEntriesId400
		| PutApiEntriesId401
		| PutApiEntriesId404
		| PutApiEntriesId500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof putApiEntriesId>>,
		TError,
		{ id: string; data: PutApiEntriesIdBody },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof putApiEntriesId>>,
	TError,
	{ id: string; data: PutApiEntriesIdBody },
	TContext
> => {
	const mutationKey = ["putApiEntriesId"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof putApiEntriesId>>,
		{ id: string; data: PutApiEntriesIdBody }
	> = (props) => {
		const { id, data } = props ?? {};

		return putApiEntriesId(id, data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PutApiEntriesIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof putApiEntriesId>>
>;
export type PutApiEntriesIdMutationBody = PutApiEntriesIdBody;
export type PutApiEntriesIdMutationError =
	| PutApiEntriesId400
	| PutApiEntriesId401
	| PutApiEntriesId404
	| PutApiEntriesId500;

/**
 * @summary Update entry
 */
export const usePutApiEntriesId = <
	TError =
		| PutApiEntriesId400
		| PutApiEntriesId401
		| PutApiEntriesId404
		| PutApiEntriesId500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof putApiEntriesId>>,
			TError,
			{ id: string; data: PutApiEntriesIdBody },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof putApiEntriesId>>,
	TError,
	{ id: string; data: PutApiEntriesIdBody },
	TContext
> => {
	const mutationOptions = getPutApiEntriesIdMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Deletes an entry
 * @summary Delete entry
 */
export type deleteApiEntriesIdResponse200 = {
	data: DeleteApiEntriesId200;
	status: 200;
};

export type deleteApiEntriesIdResponse400 = {
	data: DeleteApiEntriesId400;
	status: 400;
};

export type deleteApiEntriesIdResponse401 = {
	data: DeleteApiEntriesId401;
	status: 401;
};

export type deleteApiEntriesIdResponse404 = {
	data: DeleteApiEntriesId404;
	status: 404;
};

export type deleteApiEntriesIdResponse500 = {
	data: DeleteApiEntriesId500;
	status: 500;
};

export type deleteApiEntriesIdResponseComposite =
	| deleteApiEntriesIdResponse200
	| deleteApiEntriesIdResponse400
	| deleteApiEntriesIdResponse401
	| deleteApiEntriesIdResponse404
	| deleteApiEntriesIdResponse500;

export type deleteApiEntriesIdResponse = deleteApiEntriesIdResponseComposite & {
	headers: Headers;
};

export const getDeleteApiEntriesIdUrl = (id: string) => {
	return `http://localhost:3000/api/entries/${id}`;
};

export const deleteApiEntriesId = async (
	id: string,
	options?: RequestInit,
): Promise<deleteApiEntriesIdResponse> => {
	const res = await fetch(getDeleteApiEntriesIdUrl(id), {
		...options,
		method: "DELETE",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: deleteApiEntriesIdResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as deleteApiEntriesIdResponse;
};

export const getDeleteApiEntriesIdMutationOptions = <
	TError =
		| DeleteApiEntriesId400
		| DeleteApiEntriesId401
		| DeleteApiEntriesId404
		| DeleteApiEntriesId500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteApiEntriesId>>,
		TError,
		{ id: string },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteApiEntriesId>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ["deleteApiEntriesId"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteApiEntriesId>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return deleteApiEntriesId(id, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteApiEntriesIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteApiEntriesId>>
>;

export type DeleteApiEntriesIdMutationError =
	| DeleteApiEntriesId400
	| DeleteApiEntriesId401
	| DeleteApiEntriesId404
	| DeleteApiEntriesId500;

/**
 * @summary Delete entry
 */
export const useDeleteApiEntriesId = <
	TError =
		| DeleteApiEntriesId400
		| DeleteApiEntriesId401
		| DeleteApiEntriesId404
		| DeleteApiEntriesId500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteApiEntriesId>>,
			TError,
			{ id: string },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteApiEntriesId>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getDeleteApiEntriesIdMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Gets only the title and excerpt of an entry by ID
 * @summary Get entry metadata
 */
export type getApiEntriesIdMetadataResponse200 = {
	data: GetApiEntriesIdMetadata200;
	status: 200;
};

export type getApiEntriesIdMetadataResponse400 = {
	data: GetApiEntriesIdMetadata400;
	status: 400;
};

export type getApiEntriesIdMetadataResponse401 = {
	data: GetApiEntriesIdMetadata401;
	status: 401;
};

export type getApiEntriesIdMetadataResponse404 = {
	data: GetApiEntriesIdMetadata404;
	status: 404;
};

export type getApiEntriesIdMetadataResponse500 = {
	data: GetApiEntriesIdMetadata500;
	status: 500;
};

export type getApiEntriesIdMetadataResponseComposite =
	| getApiEntriesIdMetadataResponse200
	| getApiEntriesIdMetadataResponse400
	| getApiEntriesIdMetadataResponse401
	| getApiEntriesIdMetadataResponse404
	| getApiEntriesIdMetadataResponse500;

export type getApiEntriesIdMetadataResponse =
	getApiEntriesIdMetadataResponseComposite & {
		headers: Headers;
	};

export const getGetApiEntriesIdMetadataUrl = (id: string) => {
	return `http://localhost:3000/api/entries/${id}/metadata`;
};

export const getApiEntriesIdMetadata = async (
	id: string,
	options?: RequestInit,
): Promise<getApiEntriesIdMetadataResponse> => {
	const res = await fetch(getGetApiEntriesIdMetadataUrl(id), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: getApiEntriesIdMetadataResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiEntriesIdMetadataResponse;
};

export const getGetApiEntriesIdMetadataQueryKey = (id: string) => {
	return [`http://localhost:3000/api/entries/${id}/metadata`] as const;
};

export const getGetApiEntriesIdMetadataInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getApiEntriesIdMetadata>>>,
	TError =
		| GetApiEntriesIdMetadata400
		| GetApiEntriesIdMetadata401
		| GetApiEntriesIdMetadata404
		| GetApiEntriesIdMetadata500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetApiEntriesIdMetadataQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiEntriesIdMetadata>>
	> = ({ signal }) => getApiEntriesIdMetadata(id, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiEntriesIdMetadataInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiEntriesIdMetadata>>
>;
export type GetApiEntriesIdMetadataInfiniteQueryError =
	| GetApiEntriesIdMetadata400
	| GetApiEntriesIdMetadata401
	| GetApiEntriesIdMetadata404
	| GetApiEntriesIdMetadata500;

export function useGetApiEntriesIdMetadataInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiEntriesIdMetadata>>>,
	TError =
		| GetApiEntriesIdMetadata400
		| GetApiEntriesIdMetadata401
		| GetApiEntriesIdMetadata404
		| GetApiEntriesIdMetadata500,
>(
	id: string,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
					TError,
					Awaited<ReturnType<typeof getApiEntriesIdMetadata>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEntriesIdMetadataInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiEntriesIdMetadata>>>,
	TError =
		| GetApiEntriesIdMetadata400
		| GetApiEntriesIdMetadata401
		| GetApiEntriesIdMetadata404
		| GetApiEntriesIdMetadata500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
					TError,
					Awaited<ReturnType<typeof getApiEntriesIdMetadata>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEntriesIdMetadataInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiEntriesIdMetadata>>>,
	TError =
		| GetApiEntriesIdMetadata400
		| GetApiEntriesIdMetadata401
		| GetApiEntriesIdMetadata404
		| GetApiEntriesIdMetadata500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get entry metadata
 */

export function useGetApiEntriesIdMetadataInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiEntriesIdMetadata>>>,
	TError =
		| GetApiEntriesIdMetadata400
		| GetApiEntriesIdMetadata401
		| GetApiEntriesIdMetadata404
		| GetApiEntriesIdMetadata500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiEntriesIdMetadataInfiniteQueryOptions(
		id,
		options,
	);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetApiEntriesIdMetadataQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
	TError =
		| GetApiEntriesIdMetadata400
		| GetApiEntriesIdMetadata401
		| GetApiEntriesIdMetadata404
		| GetApiEntriesIdMetadata500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetApiEntriesIdMetadataQueryKey(id);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiEntriesIdMetadata>>
	> = ({ signal }) => getApiEntriesIdMetadata(id, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiEntriesIdMetadataQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiEntriesIdMetadata>>
>;
export type GetApiEntriesIdMetadataQueryError =
	| GetApiEntriesIdMetadata400
	| GetApiEntriesIdMetadata401
	| GetApiEntriesIdMetadata404
	| GetApiEntriesIdMetadata500;

export function useGetApiEntriesIdMetadata<
	TData = Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
	TError =
		| GetApiEntriesIdMetadata400
		| GetApiEntriesIdMetadata401
		| GetApiEntriesIdMetadata404
		| GetApiEntriesIdMetadata500,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
					TError,
					Awaited<ReturnType<typeof getApiEntriesIdMetadata>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEntriesIdMetadata<
	TData = Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
	TError =
		| GetApiEntriesIdMetadata400
		| GetApiEntriesIdMetadata401
		| GetApiEntriesIdMetadata404
		| GetApiEntriesIdMetadata500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
					TError,
					Awaited<ReturnType<typeof getApiEntriesIdMetadata>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEntriesIdMetadata<
	TData = Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
	TError =
		| GetApiEntriesIdMetadata400
		| GetApiEntriesIdMetadata401
		| GetApiEntriesIdMetadata404
		| GetApiEntriesIdMetadata500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get entry metadata
 */

export function useGetApiEntriesIdMetadata<
	TData = Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
	TError =
		| GetApiEntriesIdMetadata400
		| GetApiEntriesIdMetadata401
		| GetApiEntriesIdMetadata404
		| GetApiEntriesIdMetadata500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiEntriesIdMetadata>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiEntriesIdMetadataQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Gets a list of goals filtered by state. Returns active goals by default, with a limit of 5 for active goals and 50 for archived goals.
 * @summary Get goals
 */
export type getApiGoalsResponse200 = {
	data: GetApiGoals200Item[];
	status: 200;
};

export type getApiGoalsResponse400 = {
	data: GetApiGoals400;
	status: 400;
};

export type getApiGoalsResponse401 = {
	data: GetApiGoals401;
	status: 401;
};

export type getApiGoalsResponse500 = {
	data: GetApiGoals500;
	status: 500;
};

export type getApiGoalsResponseComposite =
	| getApiGoalsResponse200
	| getApiGoalsResponse400
	| getApiGoalsResponse401
	| getApiGoalsResponse500;

export type getApiGoalsResponse = getApiGoalsResponseComposite & {
	headers: Headers;
};

export const getGetApiGoalsUrl = (params?: GetApiGoalsParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? "null" : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `http://localhost:3000/api/goals?${stringifiedParams}`
		: `http://localhost:3000/api/goals`;
};

export const getApiGoals = async (
	params?: GetApiGoalsParams,
	options?: RequestInit,
): Promise<getApiGoalsResponse> => {
	const res = await fetch(getGetApiGoalsUrl(params), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: getApiGoalsResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiGoalsResponse;
};

export const getGetApiGoalsQueryKey = (params?: GetApiGoalsParams) => {
	return [
		`http://localhost:3000/api/goals`,
		...(params ? [params] : []),
	] as const;
};

export const getGetApiGoalsInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getApiGoals>>>,
	TError = GetApiGoals400 | GetApiGoals401 | GetApiGoals500,
>(
	params?: GetApiGoalsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiGoals>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiGoalsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGoals>>> = ({
		signal,
	}) => getApiGoals(params, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getApiGoals>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiGoalsInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiGoals>>
>;
export type GetApiGoalsInfiniteQueryError =
	| GetApiGoals400
	| GetApiGoals401
	| GetApiGoals500;

export function useGetApiGoalsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiGoals>>>,
	TError = GetApiGoals400 | GetApiGoals401 | GetApiGoals500,
>(
	params: undefined | GetApiGoalsParams,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiGoals>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiGoals>>,
					TError,
					Awaited<ReturnType<typeof getApiGoals>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGoalsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiGoals>>>,
	TError = GetApiGoals400 | GetApiGoals401 | GetApiGoals500,
>(
	params?: GetApiGoalsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiGoals>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiGoals>>,
					TError,
					Awaited<ReturnType<typeof getApiGoals>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGoalsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiGoals>>>,
	TError = GetApiGoals400 | GetApiGoals401 | GetApiGoals500,
>(
	params?: GetApiGoalsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiGoals>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get goals
 */

export function useGetApiGoalsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiGoals>>>,
	TError = GetApiGoals400 | GetApiGoals401 | GetApiGoals500,
>(
	params?: GetApiGoalsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiGoals>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiGoalsInfiniteQueryOptions(params, options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetApiGoalsQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiGoals>>,
	TError = GetApiGoals400 | GetApiGoals401 | GetApiGoals500,
>(
	params?: GetApiGoalsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiGoals>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiGoalsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGoals>>> = ({
		signal,
	}) => getApiGoals(params, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiGoals>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiGoalsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiGoals>>
>;
export type GetApiGoalsQueryError =
	| GetApiGoals400
	| GetApiGoals401
	| GetApiGoals500;

export function useGetApiGoals<
	TData = Awaited<ReturnType<typeof getApiGoals>>,
	TError = GetApiGoals400 | GetApiGoals401 | GetApiGoals500,
>(
	params: undefined | GetApiGoalsParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiGoals>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiGoals>>,
					TError,
					Awaited<ReturnType<typeof getApiGoals>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGoals<
	TData = Awaited<ReturnType<typeof getApiGoals>>,
	TError = GetApiGoals400 | GetApiGoals401 | GetApiGoals500,
>(
	params?: GetApiGoalsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiGoals>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiGoals>>,
					TError,
					Awaited<ReturnType<typeof getApiGoals>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGoals<
	TData = Awaited<ReturnType<typeof getApiGoals>>,
	TError = GetApiGoals400 | GetApiGoals401 | GetApiGoals500,
>(
	params?: GetApiGoalsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiGoals>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get goals
 */

export function useGetApiGoals<
	TData = Awaited<ReturnType<typeof getApiGoals>>,
	TError = GetApiGoals400 | GetApiGoals401 | GetApiGoals500,
>(
	params?: GetApiGoalsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiGoals>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiGoalsQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Creates a new goal with encrypted sensitive fields
 * @summary Create goal
 */
export type postApiGoalsResponse201 = {
	data: PostApiGoals201;
	status: 201;
};

export type postApiGoalsResponse400 = {
	data: PostApiGoals400;
	status: 400;
};

export type postApiGoalsResponse401 = {
	data: PostApiGoals401;
	status: 401;
};

export type postApiGoalsResponse500 = {
	data: PostApiGoals500;
	status: 500;
};

export type postApiGoalsResponseComposite =
	| postApiGoalsResponse201
	| postApiGoalsResponse400
	| postApiGoalsResponse401
	| postApiGoalsResponse500;

export type postApiGoalsResponse = postApiGoalsResponseComposite & {
	headers: Headers;
};

export const getPostApiGoalsUrl = () => {
	return `http://localhost:3000/api/goals`;
};

export const postApiGoals = async (
	postApiGoalsBody: PostApiGoalsBody,
	options?: RequestInit,
): Promise<postApiGoalsResponse> => {
	const res = await fetch(getPostApiGoalsUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(postApiGoalsBody),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: postApiGoalsResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as postApiGoalsResponse;
};

export const getPostApiGoalsMutationOptions = <
	TError = PostApiGoals400 | PostApiGoals401 | PostApiGoals500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postApiGoals>>,
		TError,
		{ data: PostApiGoalsBody },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postApiGoals>>,
	TError,
	{ data: PostApiGoalsBody },
	TContext
> => {
	const mutationKey = ["postApiGoals"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postApiGoals>>,
		{ data: PostApiGoalsBody }
	> = (props) => {
		const { data } = props ?? {};

		return postApiGoals(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostApiGoalsMutationResult = NonNullable<
	Awaited<ReturnType<typeof postApiGoals>>
>;
export type PostApiGoalsMutationBody = PostApiGoalsBody;
export type PostApiGoalsMutationError =
	| PostApiGoals400
	| PostApiGoals401
	| PostApiGoals500;

/**
 * @summary Create goal
 */
export const usePostApiGoals = <
	TError = PostApiGoals400 | PostApiGoals401 | PostApiGoals500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof postApiGoals>>,
			TError,
			{ data: PostApiGoalsBody },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof postApiGoals>>,
	TError,
	{ data: PostApiGoalsBody },
	TContext
> => {
	const mutationOptions = getPostApiGoalsMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Gets a single goal by ID with all details including encrypted fields decrypted
 * @summary Get goal
 */
export type getApiGoalsIdResponse200 = {
	data: GetApiGoalsId200;
	status: 200;
};

export type getApiGoalsIdResponse400 = {
	data: GetApiGoalsId400;
	status: 400;
};

export type getApiGoalsIdResponse401 = {
	data: GetApiGoalsId401;
	status: 401;
};

export type getApiGoalsIdResponse404 = {
	data: GetApiGoalsId404;
	status: 404;
};

export type getApiGoalsIdResponse500 = {
	data: GetApiGoalsId500;
	status: 500;
};

export type getApiGoalsIdResponseComposite =
	| getApiGoalsIdResponse200
	| getApiGoalsIdResponse400
	| getApiGoalsIdResponse401
	| getApiGoalsIdResponse404
	| getApiGoalsIdResponse500;

export type getApiGoalsIdResponse = getApiGoalsIdResponseComposite & {
	headers: Headers;
};

export const getGetApiGoalsIdUrl = (id: string) => {
	return `http://localhost:3000/api/goals/${id}`;
};

export const getApiGoalsId = async (
	id: string,
	options?: RequestInit,
): Promise<getApiGoalsIdResponse> => {
	const res = await fetch(getGetApiGoalsIdUrl(id), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: getApiGoalsIdResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiGoalsIdResponse;
};

export const getGetApiGoalsIdQueryKey = (id: string) => {
	return [`http://localhost:3000/api/goals/${id}`] as const;
};

export const getGetApiGoalsIdInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getApiGoalsId>>>,
	TError =
		| GetApiGoalsId400
		| GetApiGoalsId401
		| GetApiGoalsId404
		| GetApiGoalsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiGoalsId>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiGoalsIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGoalsId>>> = ({
		signal,
	}) => getApiGoalsId(id, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getApiGoalsId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiGoalsIdInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiGoalsId>>
>;
export type GetApiGoalsIdInfiniteQueryError =
	| GetApiGoalsId400
	| GetApiGoalsId401
	| GetApiGoalsId404
	| GetApiGoalsId500;

export function useGetApiGoalsIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiGoalsId>>>,
	TError =
		| GetApiGoalsId400
		| GetApiGoalsId401
		| GetApiGoalsId404
		| GetApiGoalsId500,
>(
	id: string,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiGoalsId>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiGoalsId>>,
					TError,
					Awaited<ReturnType<typeof getApiGoalsId>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGoalsIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiGoalsId>>>,
	TError =
		| GetApiGoalsId400
		| GetApiGoalsId401
		| GetApiGoalsId404
		| GetApiGoalsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiGoalsId>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiGoalsId>>,
					TError,
					Awaited<ReturnType<typeof getApiGoalsId>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGoalsIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiGoalsId>>>,
	TError =
		| GetApiGoalsId400
		| GetApiGoalsId401
		| GetApiGoalsId404
		| GetApiGoalsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiGoalsId>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get goal
 */

export function useGetApiGoalsIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiGoalsId>>>,
	TError =
		| GetApiGoalsId400
		| GetApiGoalsId401
		| GetApiGoalsId404
		| GetApiGoalsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiGoalsId>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiGoalsIdInfiniteQueryOptions(id, options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetApiGoalsIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiGoalsId>>,
	TError =
		| GetApiGoalsId400
		| GetApiGoalsId401
		| GetApiGoalsId404
		| GetApiGoalsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiGoalsId>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiGoalsIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGoalsId>>> = ({
		signal,
	}) => getApiGoalsId(id, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getApiGoalsId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiGoalsIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiGoalsId>>
>;
export type GetApiGoalsIdQueryError =
	| GetApiGoalsId400
	| GetApiGoalsId401
	| GetApiGoalsId404
	| GetApiGoalsId500;

export function useGetApiGoalsId<
	TData = Awaited<ReturnType<typeof getApiGoalsId>>,
	TError =
		| GetApiGoalsId400
		| GetApiGoalsId401
		| GetApiGoalsId404
		| GetApiGoalsId500,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiGoalsId>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiGoalsId>>,
					TError,
					Awaited<ReturnType<typeof getApiGoalsId>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGoalsId<
	TData = Awaited<ReturnType<typeof getApiGoalsId>>,
	TError =
		| GetApiGoalsId400
		| GetApiGoalsId401
		| GetApiGoalsId404
		| GetApiGoalsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiGoalsId>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiGoalsId>>,
					TError,
					Awaited<ReturnType<typeof getApiGoalsId>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGoalsId<
	TData = Awaited<ReturnType<typeof getApiGoalsId>>,
	TError =
		| GetApiGoalsId400
		| GetApiGoalsId401
		| GetApiGoalsId404
		| GetApiGoalsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiGoalsId>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get goal
 */

export function useGetApiGoalsId<
	TData = Awaited<ReturnType<typeof getApiGoalsId>>,
	TError =
		| GetApiGoalsId400
		| GetApiGoalsId401
		| GetApiGoalsId404
		| GetApiGoalsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiGoalsId>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiGoalsIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Updates a goal with partial updates and encrypted sensitive fields
 * @summary Update goal
 */
export type putApiGoalsIdResponse200 = {
	data: PutApiGoalsId200;
	status: 200;
};

export type putApiGoalsIdResponse400 = {
	data: PutApiGoalsId400;
	status: 400;
};

export type putApiGoalsIdResponse401 = {
	data: PutApiGoalsId401;
	status: 401;
};

export type putApiGoalsIdResponse404 = {
	data: PutApiGoalsId404;
	status: 404;
};

export type putApiGoalsIdResponse500 = {
	data: PutApiGoalsId500;
	status: 500;
};

export type putApiGoalsIdResponseComposite =
	| putApiGoalsIdResponse200
	| putApiGoalsIdResponse400
	| putApiGoalsIdResponse401
	| putApiGoalsIdResponse404
	| putApiGoalsIdResponse500;

export type putApiGoalsIdResponse = putApiGoalsIdResponseComposite & {
	headers: Headers;
};

export const getPutApiGoalsIdUrl = (id: string) => {
	return `http://localhost:3000/api/goals/${id}`;
};

export const putApiGoalsId = async (
	id: string,
	putApiGoalsIdBody: PutApiGoalsIdBody,
	options?: RequestInit,
): Promise<putApiGoalsIdResponse> => {
	const res = await fetch(getPutApiGoalsIdUrl(id), {
		...options,
		method: "PUT",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(putApiGoalsIdBody),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: putApiGoalsIdResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as putApiGoalsIdResponse;
};

export const getPutApiGoalsIdMutationOptions = <
	TError =
		| PutApiGoalsId400
		| PutApiGoalsId401
		| PutApiGoalsId404
		| PutApiGoalsId500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof putApiGoalsId>>,
		TError,
		{ id: string; data: PutApiGoalsIdBody },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof putApiGoalsId>>,
	TError,
	{ id: string; data: PutApiGoalsIdBody },
	TContext
> => {
	const mutationKey = ["putApiGoalsId"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof putApiGoalsId>>,
		{ id: string; data: PutApiGoalsIdBody }
	> = (props) => {
		const { id, data } = props ?? {};

		return putApiGoalsId(id, data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PutApiGoalsIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof putApiGoalsId>>
>;
export type PutApiGoalsIdMutationBody = PutApiGoalsIdBody;
export type PutApiGoalsIdMutationError =
	| PutApiGoalsId400
	| PutApiGoalsId401
	| PutApiGoalsId404
	| PutApiGoalsId500;

/**
 * @summary Update goal
 */
export const usePutApiGoalsId = <
	TError =
		| PutApiGoalsId400
		| PutApiGoalsId401
		| PutApiGoalsId404
		| PutApiGoalsId500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof putApiGoalsId>>,
			TError,
			{ id: string; data: PutApiGoalsIdBody },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof putApiGoalsId>>,
	TError,
	{ id: string; data: PutApiGoalsIdBody },
	TContext
> => {
	const mutationOptions = getPutApiGoalsIdMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Permanently deletes a goal from the database
 * @summary Delete goal
 */
export type deleteApiGoalsIdResponse200 = {
	data: DeleteApiGoalsId200;
	status: 200;
};

export type deleteApiGoalsIdResponse400 = {
	data: DeleteApiGoalsId400;
	status: 400;
};

export type deleteApiGoalsIdResponse401 = {
	data: DeleteApiGoalsId401;
	status: 401;
};

export type deleteApiGoalsIdResponse404 = {
	data: DeleteApiGoalsId404;
	status: 404;
};

export type deleteApiGoalsIdResponse500 = {
	data: DeleteApiGoalsId500;
	status: 500;
};

export type deleteApiGoalsIdResponseComposite =
	| deleteApiGoalsIdResponse200
	| deleteApiGoalsIdResponse400
	| deleteApiGoalsIdResponse401
	| deleteApiGoalsIdResponse404
	| deleteApiGoalsIdResponse500;

export type deleteApiGoalsIdResponse = deleteApiGoalsIdResponseComposite & {
	headers: Headers;
};

export const getDeleteApiGoalsIdUrl = (id: string) => {
	return `http://localhost:3000/api/goals/${id}`;
};

export const deleteApiGoalsId = async (
	id: string,
	options?: RequestInit,
): Promise<deleteApiGoalsIdResponse> => {
	const res = await fetch(getDeleteApiGoalsIdUrl(id), {
		...options,
		method: "DELETE",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: deleteApiGoalsIdResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as deleteApiGoalsIdResponse;
};

export const getDeleteApiGoalsIdMutationOptions = <
	TError =
		| DeleteApiGoalsId400
		| DeleteApiGoalsId401
		| DeleteApiGoalsId404
		| DeleteApiGoalsId500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteApiGoalsId>>,
		TError,
		{ id: string },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteApiGoalsId>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ["deleteApiGoalsId"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteApiGoalsId>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return deleteApiGoalsId(id, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteApiGoalsIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteApiGoalsId>>
>;

export type DeleteApiGoalsIdMutationError =
	| DeleteApiGoalsId400
	| DeleteApiGoalsId401
	| DeleteApiGoalsId404
	| DeleteApiGoalsId500;

/**
 * @summary Delete goal
 */
export const useDeleteApiGoalsId = <
	TError =
		| DeleteApiGoalsId400
		| DeleteApiGoalsId401
		| DeleteApiGoalsId404
		| DeleteApiGoalsId500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteApiGoalsId>>,
			TError,
			{ id: string },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteApiGoalsId>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getDeleteApiGoalsIdMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Retrieve paginated logs for a specific goal with metadata
 * @summary Get paginated logs for a goal
 */
export type getApiGoalGoalIdLogsResponse200 = {
	data: GetApiGoalGoalIdLogs200;
	status: 200;
};

export type getApiGoalGoalIdLogsResponse400 = {
	data: GetApiGoalGoalIdLogs400;
	status: 400;
};

export type getApiGoalGoalIdLogsResponse401 = {
	data: GetApiGoalGoalIdLogs401;
	status: 401;
};

export type getApiGoalGoalIdLogsResponse404 = {
	data: GetApiGoalGoalIdLogs404;
	status: 404;
};

export type getApiGoalGoalIdLogsResponse500 = {
	data: GetApiGoalGoalIdLogs500;
	status: 500;
};

export type getApiGoalGoalIdLogsResponseComposite =
	| getApiGoalGoalIdLogsResponse200
	| getApiGoalGoalIdLogsResponse400
	| getApiGoalGoalIdLogsResponse401
	| getApiGoalGoalIdLogsResponse404
	| getApiGoalGoalIdLogsResponse500;

export type getApiGoalGoalIdLogsResponse =
	getApiGoalGoalIdLogsResponseComposite & {
		headers: Headers;
	};

export const getGetApiGoalGoalIdLogsUrl = (
	goalId: string,
	params?: GetApiGoalGoalIdLogsParams,
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? "null" : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `http://localhost:3000/api/goal/${goalId}/logs?${stringifiedParams}`
		: `http://localhost:3000/api/goal/${goalId}/logs`;
};

export const getApiGoalGoalIdLogs = async (
	goalId: string,
	params?: GetApiGoalGoalIdLogsParams,
	options?: RequestInit,
): Promise<getApiGoalGoalIdLogsResponse> => {
	const res = await fetch(getGetApiGoalGoalIdLogsUrl(goalId, params), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: getApiGoalGoalIdLogsResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiGoalGoalIdLogsResponse;
};

export const getGetApiGoalGoalIdLogsQueryKey = (
	goalId: string,
	params?: GetApiGoalGoalIdLogsParams,
) => {
	return [
		`http://localhost:3000/api/goal/${goalId}/logs`,
		...(params ? [params] : []),
	] as const;
};

export const getGetApiGoalGoalIdLogsInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>>,
	TError =
		| GetApiGoalGoalIdLogs400
		| GetApiGoalGoalIdLogs401
		| GetApiGoalGoalIdLogs404
		| GetApiGoalGoalIdLogs500,
>(
	goalId: string,
	params?: GetApiGoalGoalIdLogsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetApiGoalGoalIdLogsQueryKey(goalId, params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>
	> = ({ signal }) =>
		getApiGoalGoalIdLogs(goalId, params, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!goalId,
		...queryOptions,
	} as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiGoalGoalIdLogsInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>
>;
export type GetApiGoalGoalIdLogsInfiniteQueryError =
	| GetApiGoalGoalIdLogs400
	| GetApiGoalGoalIdLogs401
	| GetApiGoalGoalIdLogs404
	| GetApiGoalGoalIdLogs500;

export function useGetApiGoalGoalIdLogsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>>,
	TError =
		| GetApiGoalGoalIdLogs400
		| GetApiGoalGoalIdLogs401
		| GetApiGoalGoalIdLogs404
		| GetApiGoalGoalIdLogs500,
>(
	goalId: string,
	params: undefined | GetApiGoalGoalIdLogsParams,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
					TError,
					Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGoalGoalIdLogsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>>,
	TError =
		| GetApiGoalGoalIdLogs400
		| GetApiGoalGoalIdLogs401
		| GetApiGoalGoalIdLogs404
		| GetApiGoalGoalIdLogs500,
>(
	goalId: string,
	params?: GetApiGoalGoalIdLogsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
					TError,
					Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGoalGoalIdLogsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>>,
	TError =
		| GetApiGoalGoalIdLogs400
		| GetApiGoalGoalIdLogs401
		| GetApiGoalGoalIdLogs404
		| GetApiGoalGoalIdLogs500,
>(
	goalId: string,
	params?: GetApiGoalGoalIdLogsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get paginated logs for a goal
 */

export function useGetApiGoalGoalIdLogsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>>,
	TError =
		| GetApiGoalGoalIdLogs400
		| GetApiGoalGoalIdLogs401
		| GetApiGoalGoalIdLogs404
		| GetApiGoalGoalIdLogs500,
>(
	goalId: string,
	params?: GetApiGoalGoalIdLogsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiGoalGoalIdLogsInfiniteQueryOptions(
		goalId,
		params,
		options,
	);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetApiGoalGoalIdLogsQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
	TError =
		| GetApiGoalGoalIdLogs400
		| GetApiGoalGoalIdLogs401
		| GetApiGoalGoalIdLogs404
		| GetApiGoalGoalIdLogs500,
>(
	goalId: string,
	params?: GetApiGoalGoalIdLogsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetApiGoalGoalIdLogsQueryKey(goalId, params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>
	> = ({ signal }) =>
		getApiGoalGoalIdLogs(goalId, params, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!goalId,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiGoalGoalIdLogsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>
>;
export type GetApiGoalGoalIdLogsQueryError =
	| GetApiGoalGoalIdLogs400
	| GetApiGoalGoalIdLogs401
	| GetApiGoalGoalIdLogs404
	| GetApiGoalGoalIdLogs500;

export function useGetApiGoalGoalIdLogs<
	TData = Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
	TError =
		| GetApiGoalGoalIdLogs400
		| GetApiGoalGoalIdLogs401
		| GetApiGoalGoalIdLogs404
		| GetApiGoalGoalIdLogs500,
>(
	goalId: string,
	params: undefined | GetApiGoalGoalIdLogsParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
					TError,
					Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGoalGoalIdLogs<
	TData = Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
	TError =
		| GetApiGoalGoalIdLogs400
		| GetApiGoalGoalIdLogs401
		| GetApiGoalGoalIdLogs404
		| GetApiGoalGoalIdLogs500,
>(
	goalId: string,
	params?: GetApiGoalGoalIdLogsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
					TError,
					Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiGoalGoalIdLogs<
	TData = Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
	TError =
		| GetApiGoalGoalIdLogs400
		| GetApiGoalGoalIdLogs401
		| GetApiGoalGoalIdLogs404
		| GetApiGoalGoalIdLogs500,
>(
	goalId: string,
	params?: GetApiGoalGoalIdLogsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get paginated logs for a goal
 */

export function useGetApiGoalGoalIdLogs<
	TData = Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
	TError =
		| GetApiGoalGoalIdLogs400
		| GetApiGoalGoalIdLogs401
		| GetApiGoalGoalIdLogs404
		| GetApiGoalGoalIdLogs500,
>(
	goalId: string,
	params?: GetApiGoalGoalIdLogsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiGoalGoalIdLogs>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiGoalGoalIdLogsQueryOptions(
		goalId,
		params,
		options,
	);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Create a new log entry for a specific goal
 * @summary Create a new log for a goal
 */
export type postApiGoalGoalIdLogsResponse201 = {
	data: PostApiGoalGoalIdLogs201;
	status: 201;
};

export type postApiGoalGoalIdLogsResponse400 = {
	data: PostApiGoalGoalIdLogs400;
	status: 400;
};

export type postApiGoalGoalIdLogsResponse401 = {
	data: PostApiGoalGoalIdLogs401;
	status: 401;
};

export type postApiGoalGoalIdLogsResponse404 = {
	data: PostApiGoalGoalIdLogs404;
	status: 404;
};

export type postApiGoalGoalIdLogsResponse500 = {
	data: PostApiGoalGoalIdLogs500;
	status: 500;
};

export type postApiGoalGoalIdLogsResponseComposite =
	| postApiGoalGoalIdLogsResponse201
	| postApiGoalGoalIdLogsResponse400
	| postApiGoalGoalIdLogsResponse401
	| postApiGoalGoalIdLogsResponse404
	| postApiGoalGoalIdLogsResponse500;

export type postApiGoalGoalIdLogsResponse =
	postApiGoalGoalIdLogsResponseComposite & {
		headers: Headers;
	};

export const getPostApiGoalGoalIdLogsUrl = (goalId: string) => {
	return `http://localhost:3000/api/goal/${goalId}/logs`;
};

export const postApiGoalGoalIdLogs = async (
	goalId: string,
	postApiGoalGoalIdLogsBody: PostApiGoalGoalIdLogsBody,
	options?: RequestInit,
): Promise<postApiGoalGoalIdLogsResponse> => {
	const res = await fetch(getPostApiGoalGoalIdLogsUrl(goalId), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(postApiGoalGoalIdLogsBody),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: postApiGoalGoalIdLogsResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as postApiGoalGoalIdLogsResponse;
};

export const getPostApiGoalGoalIdLogsMutationOptions = <
	TError =
		| PostApiGoalGoalIdLogs400
		| PostApiGoalGoalIdLogs401
		| PostApiGoalGoalIdLogs404
		| PostApiGoalGoalIdLogs500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postApiGoalGoalIdLogs>>,
		TError,
		{ goalId: string; data: PostApiGoalGoalIdLogsBody },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postApiGoalGoalIdLogs>>,
	TError,
	{ goalId: string; data: PostApiGoalGoalIdLogsBody },
	TContext
> => {
	const mutationKey = ["postApiGoalGoalIdLogs"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postApiGoalGoalIdLogs>>,
		{ goalId: string; data: PostApiGoalGoalIdLogsBody }
	> = (props) => {
		const { goalId, data } = props ?? {};

		return postApiGoalGoalIdLogs(goalId, data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostApiGoalGoalIdLogsMutationResult = NonNullable<
	Awaited<ReturnType<typeof postApiGoalGoalIdLogs>>
>;
export type PostApiGoalGoalIdLogsMutationBody = PostApiGoalGoalIdLogsBody;
export type PostApiGoalGoalIdLogsMutationError =
	| PostApiGoalGoalIdLogs400
	| PostApiGoalGoalIdLogs401
	| PostApiGoalGoalIdLogs404
	| PostApiGoalGoalIdLogs500;

/**
 * @summary Create a new log for a goal
 */
export const usePostApiGoalGoalIdLogs = <
	TError =
		| PostApiGoalGoalIdLogs400
		| PostApiGoalGoalIdLogs401
		| PostApiGoalGoalIdLogs404
		| PostApiGoalGoalIdLogs500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof postApiGoalGoalIdLogs>>,
			TError,
			{ goalId: string; data: PostApiGoalGoalIdLogsBody },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof postApiGoalGoalIdLogs>>,
	TError,
	{ goalId: string; data: PostApiGoalGoalIdLogsBody },
	TContext
> => {
	const mutationOptions = getPostApiGoalGoalIdLogsMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Update an existing log entry for a goal
 * @summary Update a log entry
 */
export type putApiGoalGoalIdLogsIdResponse200 = {
	data: PutApiGoalGoalIdLogsId200;
	status: 200;
};

export type putApiGoalGoalIdLogsIdResponse400 = {
	data: PutApiGoalGoalIdLogsId400;
	status: 400;
};

export type putApiGoalGoalIdLogsIdResponse401 = {
	data: PutApiGoalGoalIdLogsId401;
	status: 401;
};

export type putApiGoalGoalIdLogsIdResponse404 = {
	data: PutApiGoalGoalIdLogsId404;
	status: 404;
};

export type putApiGoalGoalIdLogsIdResponse500 = {
	data: PutApiGoalGoalIdLogsId500;
	status: 500;
};

export type putApiGoalGoalIdLogsIdResponseComposite =
	| putApiGoalGoalIdLogsIdResponse200
	| putApiGoalGoalIdLogsIdResponse400
	| putApiGoalGoalIdLogsIdResponse401
	| putApiGoalGoalIdLogsIdResponse404
	| putApiGoalGoalIdLogsIdResponse500;

export type putApiGoalGoalIdLogsIdResponse =
	putApiGoalGoalIdLogsIdResponseComposite & {
		headers: Headers;
	};

export const getPutApiGoalGoalIdLogsIdUrl = (goalId: string, id: string) => {
	return `http://localhost:3000/api/goal/${goalId}/logs/${id}`;
};

export const putApiGoalGoalIdLogsId = async (
	goalId: string,
	id: string,
	putApiGoalGoalIdLogsIdBody: PutApiGoalGoalIdLogsIdBody,
	options?: RequestInit,
): Promise<putApiGoalGoalIdLogsIdResponse> => {
	const res = await fetch(getPutApiGoalGoalIdLogsIdUrl(goalId, id), {
		...options,
		method: "PUT",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(putApiGoalGoalIdLogsIdBody),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: putApiGoalGoalIdLogsIdResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as putApiGoalGoalIdLogsIdResponse;
};

export const getPutApiGoalGoalIdLogsIdMutationOptions = <
	TError =
		| PutApiGoalGoalIdLogsId400
		| PutApiGoalGoalIdLogsId401
		| PutApiGoalGoalIdLogsId404
		| PutApiGoalGoalIdLogsId500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof putApiGoalGoalIdLogsId>>,
		TError,
		{ goalId: string; id: string; data: PutApiGoalGoalIdLogsIdBody },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof putApiGoalGoalIdLogsId>>,
	TError,
	{ goalId: string; id: string; data: PutApiGoalGoalIdLogsIdBody },
	TContext
> => {
	const mutationKey = ["putApiGoalGoalIdLogsId"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof putApiGoalGoalIdLogsId>>,
		{ goalId: string; id: string; data: PutApiGoalGoalIdLogsIdBody }
	> = (props) => {
		const { goalId, id, data } = props ?? {};

		return putApiGoalGoalIdLogsId(goalId, id, data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PutApiGoalGoalIdLogsIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof putApiGoalGoalIdLogsId>>
>;
export type PutApiGoalGoalIdLogsIdMutationBody = PutApiGoalGoalIdLogsIdBody;
export type PutApiGoalGoalIdLogsIdMutationError =
	| PutApiGoalGoalIdLogsId400
	| PutApiGoalGoalIdLogsId401
	| PutApiGoalGoalIdLogsId404
	| PutApiGoalGoalIdLogsId500;

/**
 * @summary Update a log entry
 */
export const usePutApiGoalGoalIdLogsId = <
	TError =
		| PutApiGoalGoalIdLogsId400
		| PutApiGoalGoalIdLogsId401
		| PutApiGoalGoalIdLogsId404
		| PutApiGoalGoalIdLogsId500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof putApiGoalGoalIdLogsId>>,
			TError,
			{ goalId: string; id: string; data: PutApiGoalGoalIdLogsIdBody },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof putApiGoalGoalIdLogsId>>,
	TError,
	{ goalId: string; id: string; data: PutApiGoalGoalIdLogsIdBody },
	TContext
> => {
	const mutationOptions = getPutApiGoalGoalIdLogsIdMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Delete an existing log entry for a goal
 * @summary Delete a log entry
 */
export type deleteApiGoalGoalIdLogsIdResponse200 = {
	data: DeleteApiGoalGoalIdLogsId200;
	status: 200;
};

export type deleteApiGoalGoalIdLogsIdResponse401 = {
	data: DeleteApiGoalGoalIdLogsId401;
	status: 401;
};

export type deleteApiGoalGoalIdLogsIdResponse404 = {
	data: DeleteApiGoalGoalIdLogsId404;
	status: 404;
};

export type deleteApiGoalGoalIdLogsIdResponse500 = {
	data: DeleteApiGoalGoalIdLogsId500;
	status: 500;
};

export type deleteApiGoalGoalIdLogsIdResponseComposite =
	| deleteApiGoalGoalIdLogsIdResponse200
	| deleteApiGoalGoalIdLogsIdResponse401
	| deleteApiGoalGoalIdLogsIdResponse404
	| deleteApiGoalGoalIdLogsIdResponse500;

export type deleteApiGoalGoalIdLogsIdResponse =
	deleteApiGoalGoalIdLogsIdResponseComposite & {
		headers: Headers;
	};

export const getDeleteApiGoalGoalIdLogsIdUrl = (goalId: string, id: string) => {
	return `http://localhost:3000/api/goal/${goalId}/logs/${id}`;
};

export const deleteApiGoalGoalIdLogsId = async (
	goalId: string,
	id: string,
	options?: RequestInit,
): Promise<deleteApiGoalGoalIdLogsIdResponse> => {
	const res = await fetch(getDeleteApiGoalGoalIdLogsIdUrl(goalId, id), {
		...options,
		method: "DELETE",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: deleteApiGoalGoalIdLogsIdResponse["data"] = body
		? JSON.parse(body)
		: {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as deleteApiGoalGoalIdLogsIdResponse;
};

export const getDeleteApiGoalGoalIdLogsIdMutationOptions = <
	TError =
		| DeleteApiGoalGoalIdLogsId401
		| DeleteApiGoalGoalIdLogsId404
		| DeleteApiGoalGoalIdLogsId500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteApiGoalGoalIdLogsId>>,
		TError,
		{ goalId: string; id: string },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteApiGoalGoalIdLogsId>>,
	TError,
	{ goalId: string; id: string },
	TContext
> => {
	const mutationKey = ["deleteApiGoalGoalIdLogsId"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteApiGoalGoalIdLogsId>>,
		{ goalId: string; id: string }
	> = (props) => {
		const { goalId, id } = props ?? {};

		return deleteApiGoalGoalIdLogsId(goalId, id, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteApiGoalGoalIdLogsIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteApiGoalGoalIdLogsId>>
>;

export type DeleteApiGoalGoalIdLogsIdMutationError =
	| DeleteApiGoalGoalIdLogsId401
	| DeleteApiGoalGoalIdLogsId404
	| DeleteApiGoalGoalIdLogsId500;

/**
 * @summary Delete a log entry
 */
export const useDeleteApiGoalGoalIdLogsId = <
	TError =
		| DeleteApiGoalGoalIdLogsId401
		| DeleteApiGoalGoalIdLogsId404
		| DeleteApiGoalGoalIdLogsId500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteApiGoalGoalIdLogsId>>,
			TError,
			{ goalId: string; id: string },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteApiGoalGoalIdLogsId>>,
	TError,
	{ goalId: string; id: string },
	TContext
> => {
	const mutationOptions = getDeleteApiGoalGoalIdLogsIdMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Gets a list of all tags for the authenticated user
 * @summary Get tags
 */
export type getApiTagsResponse200 = {
	data: GetApiTags200Item[];
	status: 200;
};

export type getApiTagsResponse401 = {
	data: GetApiTags401;
	status: 401;
};

export type getApiTagsResponse500 = {
	data: GetApiTags500;
	status: 500;
};

export type getApiTagsResponseComposite =
	| getApiTagsResponse200
	| getApiTagsResponse401
	| getApiTagsResponse500;

export type getApiTagsResponse = getApiTagsResponseComposite & {
	headers: Headers;
};

export const getGetApiTagsUrl = () => {
	return `http://localhost:3000/api/tags`;
};

export const getApiTags = async (
	options?: RequestInit,
): Promise<getApiTagsResponse> => {
	const res = await fetch(getGetApiTagsUrl(), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: getApiTagsResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiTagsResponse;
};

export const getGetApiTagsQueryKey = () => {
	return [`http://localhost:3000/api/tags`] as const;
};

export const getGetApiTagsInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getApiTags>>>,
	TError = GetApiTags401 | GetApiTags500,
>(options?: {
	query?: Partial<
		UseInfiniteQueryOptions<
			Awaited<ReturnType<typeof getApiTags>>,
			TError,
			TData
		>
	>;
	fetch?: RequestInit;
}) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiTagsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTags>>> = ({
		signal,
	}) => getApiTags({ signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getApiTags>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiTagsInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiTags>>
>;
export type GetApiTagsInfiniteQueryError = GetApiTags401 | GetApiTags500;

export function useGetApiTagsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiTags>>>,
	TError = GetApiTags401 | GetApiTags500,
>(
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiTags>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiTags>>,
					TError,
					Awaited<ReturnType<typeof getApiTags>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTagsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiTags>>>,
	TError = GetApiTags401 | GetApiTags500,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiTags>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiTags>>,
					TError,
					Awaited<ReturnType<typeof getApiTags>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTagsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiTags>>>,
	TError = GetApiTags401 | GetApiTags500,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiTags>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get tags
 */

export function useGetApiTagsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiTags>>>,
	TError = GetApiTags401 | GetApiTags500,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiTags>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiTagsInfiniteQueryOptions(options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetApiTagsQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiTags>>,
	TError = GetApiTags401 | GetApiTags500,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiTags>>, TError, TData>
	>;
	fetch?: RequestInit;
}) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiTagsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTags>>> = ({
		signal,
	}) => getApiTags({ signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiTags>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiTagsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiTags>>
>;
export type GetApiTagsQueryError = GetApiTags401 | GetApiTags500;

export function useGetApiTags<
	TData = Awaited<ReturnType<typeof getApiTags>>,
	TError = GetApiTags401 | GetApiTags500,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiTags>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiTags>>,
					TError,
					Awaited<ReturnType<typeof getApiTags>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTags<
	TData = Awaited<ReturnType<typeof getApiTags>>,
	TError = GetApiTags401 | GetApiTags500,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiTags>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiTags>>,
					TError,
					Awaited<ReturnType<typeof getApiTags>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTags<
	TData = Awaited<ReturnType<typeof getApiTags>>,
	TError = GetApiTags401 | GetApiTags500,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiTags>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get tags
 */

export function useGetApiTags<
	TData = Awaited<ReturnType<typeof getApiTags>>,
	TError = GetApiTags401 | GetApiTags500,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiTags>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiTagsQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Creates a new tag for the authenticated user
 * @summary Create tag
 */
export type postApiTagsResponse201 = {
	data: PostApiTags201;
	status: 201;
};

export type postApiTagsResponse400 = {
	data: PostApiTags400;
	status: 400;
};

export type postApiTagsResponse401 = {
	data: PostApiTags401;
	status: 401;
};

export type postApiTagsResponse500 = {
	data: PostApiTags500;
	status: 500;
};

export type postApiTagsResponseComposite =
	| postApiTagsResponse201
	| postApiTagsResponse400
	| postApiTagsResponse401
	| postApiTagsResponse500;

export type postApiTagsResponse = postApiTagsResponseComposite & {
	headers: Headers;
};

export const getPostApiTagsUrl = () => {
	return `http://localhost:3000/api/tags`;
};

export const postApiTags = async (
	postApiTagsBody: PostApiTagsBody,
	options?: RequestInit,
): Promise<postApiTagsResponse> => {
	const res = await fetch(getPostApiTagsUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(postApiTagsBody),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: postApiTagsResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as postApiTagsResponse;
};

export const getPostApiTagsMutationOptions = <
	TError = PostApiTags400 | PostApiTags401 | PostApiTags500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof postApiTags>>,
		TError,
		{ data: PostApiTagsBody },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof postApiTags>>,
	TError,
	{ data: PostApiTagsBody },
	TContext
> => {
	const mutationKey = ["postApiTags"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof postApiTags>>,
		{ data: PostApiTagsBody }
	> = (props) => {
		const { data } = props ?? {};

		return postApiTags(data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PostApiTagsMutationResult = NonNullable<
	Awaited<ReturnType<typeof postApiTags>>
>;
export type PostApiTagsMutationBody = PostApiTagsBody;
export type PostApiTagsMutationError =
	| PostApiTags400
	| PostApiTags401
	| PostApiTags500;

/**
 * @summary Create tag
 */
export const usePostApiTags = <
	TError = PostApiTags400 | PostApiTags401 | PostApiTags500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof postApiTags>>,
			TError,
			{ data: PostApiTagsBody },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof postApiTags>>,
	TError,
	{ data: PostApiTagsBody },
	TContext
> => {
	const mutationOptions = getPostApiTagsMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Gets a single tag by ID
 * @summary Get tag
 */
export type getApiTagsIdResponse200 = {
	data: GetApiTagsId200;
	status: 200;
};

export type getApiTagsIdResponse400 = {
	data: GetApiTagsId400;
	status: 400;
};

export type getApiTagsIdResponse401 = {
	data: GetApiTagsId401;
	status: 401;
};

export type getApiTagsIdResponse404 = {
	data: GetApiTagsId404;
	status: 404;
};

export type getApiTagsIdResponse500 = {
	data: GetApiTagsId500;
	status: 500;
};

export type getApiTagsIdResponseComposite =
	| getApiTagsIdResponse200
	| getApiTagsIdResponse400
	| getApiTagsIdResponse401
	| getApiTagsIdResponse404
	| getApiTagsIdResponse500;

export type getApiTagsIdResponse = getApiTagsIdResponseComposite & {
	headers: Headers;
};

export const getGetApiTagsIdUrl = (id: string) => {
	return `http://localhost:3000/api/tags/${id}`;
};

export const getApiTagsId = async (
	id: string,
	options?: RequestInit,
): Promise<getApiTagsIdResponse> => {
	const res = await fetch(getGetApiTagsIdUrl(id), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: getApiTagsIdResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiTagsIdResponse;
};

export const getGetApiTagsIdQueryKey = (id: string) => {
	return [`http://localhost:3000/api/tags/${id}`] as const;
};

export const getGetApiTagsIdInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getApiTagsId>>>,
	TError =
		| GetApiTagsId400
		| GetApiTagsId401
		| GetApiTagsId404
		| GetApiTagsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiTagsId>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiTagsIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTagsId>>> = ({
		signal,
	}) => getApiTagsId(id, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getApiTagsId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiTagsIdInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiTagsId>>
>;
export type GetApiTagsIdInfiniteQueryError =
	| GetApiTagsId400
	| GetApiTagsId401
	| GetApiTagsId404
	| GetApiTagsId500;

export function useGetApiTagsIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiTagsId>>>,
	TError =
		| GetApiTagsId400
		| GetApiTagsId401
		| GetApiTagsId404
		| GetApiTagsId500,
>(
	id: string,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiTagsId>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiTagsId>>,
					TError,
					Awaited<ReturnType<typeof getApiTagsId>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTagsIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiTagsId>>>,
	TError =
		| GetApiTagsId400
		| GetApiTagsId401
		| GetApiTagsId404
		| GetApiTagsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiTagsId>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiTagsId>>,
					TError,
					Awaited<ReturnType<typeof getApiTagsId>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTagsIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiTagsId>>>,
	TError =
		| GetApiTagsId400
		| GetApiTagsId401
		| GetApiTagsId404
		| GetApiTagsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiTagsId>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get tag
 */

export function useGetApiTagsIdInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiTagsId>>>,
	TError =
		| GetApiTagsId400
		| GetApiTagsId401
		| GetApiTagsId404
		| GetApiTagsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiTagsId>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiTagsIdInfiniteQueryOptions(id, options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetApiTagsIdQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiTagsId>>,
	TError =
		| GetApiTagsId400
		| GetApiTagsId401
		| GetApiTagsId404
		| GetApiTagsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiTagsId>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiTagsIdQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTagsId>>> = ({
		signal,
	}) => getApiTagsId(id, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getApiTagsId>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiTagsIdQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiTagsId>>
>;
export type GetApiTagsIdQueryError =
	| GetApiTagsId400
	| GetApiTagsId401
	| GetApiTagsId404
	| GetApiTagsId500;

export function useGetApiTagsId<
	TData = Awaited<ReturnType<typeof getApiTagsId>>,
	TError =
		| GetApiTagsId400
		| GetApiTagsId401
		| GetApiTagsId404
		| GetApiTagsId500,
>(
	id: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiTagsId>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiTagsId>>,
					TError,
					Awaited<ReturnType<typeof getApiTagsId>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTagsId<
	TData = Awaited<ReturnType<typeof getApiTagsId>>,
	TError =
		| GetApiTagsId400
		| GetApiTagsId401
		| GetApiTagsId404
		| GetApiTagsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiTagsId>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiTagsId>>,
					TError,
					Awaited<ReturnType<typeof getApiTagsId>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTagsId<
	TData = Awaited<ReturnType<typeof getApiTagsId>>,
	TError =
		| GetApiTagsId400
		| GetApiTagsId401
		| GetApiTagsId404
		| GetApiTagsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiTagsId>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get tag
 */

export function useGetApiTagsId<
	TData = Awaited<ReturnType<typeof getApiTagsId>>,
	TError =
		| GetApiTagsId400
		| GetApiTagsId401
		| GetApiTagsId404
		| GetApiTagsId500,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiTagsId>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiTagsIdQueryOptions(id, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Updates a tag with partial updates
 * @summary Update tag
 */
export type putApiTagsIdResponse200 = {
	data: PutApiTagsId200;
	status: 200;
};

export type putApiTagsIdResponse400 = {
	data: PutApiTagsId400;
	status: 400;
};

export type putApiTagsIdResponse401 = {
	data: PutApiTagsId401;
	status: 401;
};

export type putApiTagsIdResponse404 = {
	data: PutApiTagsId404;
	status: 404;
};

export type putApiTagsIdResponse500 = {
	data: PutApiTagsId500;
	status: 500;
};

export type putApiTagsIdResponseComposite =
	| putApiTagsIdResponse200
	| putApiTagsIdResponse400
	| putApiTagsIdResponse401
	| putApiTagsIdResponse404
	| putApiTagsIdResponse500;

export type putApiTagsIdResponse = putApiTagsIdResponseComposite & {
	headers: Headers;
};

export const getPutApiTagsIdUrl = (id: string) => {
	return `http://localhost:3000/api/tags/${id}`;
};

export const putApiTagsId = async (
	id: string,
	putApiTagsIdBody: PutApiTagsIdBody,
	options?: RequestInit,
): Promise<putApiTagsIdResponse> => {
	const res = await fetch(getPutApiTagsIdUrl(id), {
		...options,
		method: "PUT",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(putApiTagsIdBody),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: putApiTagsIdResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as putApiTagsIdResponse;
};

export const getPutApiTagsIdMutationOptions = <
	TError =
		| PutApiTagsId400
		| PutApiTagsId401
		| PutApiTagsId404
		| PutApiTagsId500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof putApiTagsId>>,
		TError,
		{ id: string; data: PutApiTagsIdBody },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof putApiTagsId>>,
	TError,
	{ id: string; data: PutApiTagsIdBody },
	TContext
> => {
	const mutationKey = ["putApiTagsId"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof putApiTagsId>>,
		{ id: string; data: PutApiTagsIdBody }
	> = (props) => {
		const { id, data } = props ?? {};

		return putApiTagsId(id, data, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type PutApiTagsIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof putApiTagsId>>
>;
export type PutApiTagsIdMutationBody = PutApiTagsIdBody;
export type PutApiTagsIdMutationError =
	| PutApiTagsId400
	| PutApiTagsId401
	| PutApiTagsId404
	| PutApiTagsId500;

/**
 * @summary Update tag
 */
export const usePutApiTagsId = <
	TError =
		| PutApiTagsId400
		| PutApiTagsId401
		| PutApiTagsId404
		| PutApiTagsId500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof putApiTagsId>>,
			TError,
			{ id: string; data: PutApiTagsIdBody },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof putApiTagsId>>,
	TError,
	{ id: string; data: PutApiTagsIdBody },
	TContext
> => {
	const mutationOptions = getPutApiTagsIdMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Permanently deletes a tag from the database
 * @summary Delete tag
 */
export type deleteApiTagsIdResponse200 = {
	data: DeleteApiTagsId200;
	status: 200;
};

export type deleteApiTagsIdResponse400 = {
	data: DeleteApiTagsId400;
	status: 400;
};

export type deleteApiTagsIdResponse401 = {
	data: DeleteApiTagsId401;
	status: 401;
};

export type deleteApiTagsIdResponse404 = {
	data: DeleteApiTagsId404;
	status: 404;
};

export type deleteApiTagsIdResponse500 = {
	data: DeleteApiTagsId500;
	status: 500;
};

export type deleteApiTagsIdResponseComposite =
	| deleteApiTagsIdResponse200
	| deleteApiTagsIdResponse400
	| deleteApiTagsIdResponse401
	| deleteApiTagsIdResponse404
	| deleteApiTagsIdResponse500;

export type deleteApiTagsIdResponse = deleteApiTagsIdResponseComposite & {
	headers: Headers;
};

export const getDeleteApiTagsIdUrl = (id: string) => {
	return `http://localhost:3000/api/tags/${id}`;
};

export const deleteApiTagsId = async (
	id: string,
	options?: RequestInit,
): Promise<deleteApiTagsIdResponse> => {
	const res = await fetch(getDeleteApiTagsIdUrl(id), {
		...options,
		method: "DELETE",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: deleteApiTagsIdResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as deleteApiTagsIdResponse;
};

export const getDeleteApiTagsIdMutationOptions = <
	TError =
		| DeleteApiTagsId400
		| DeleteApiTagsId401
		| DeleteApiTagsId404
		| DeleteApiTagsId500,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof deleteApiTagsId>>,
		TError,
		{ id: string },
		TContext
	>;
	fetch?: RequestInit;
}): UseMutationOptions<
	Awaited<ReturnType<typeof deleteApiTagsId>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationKey = ["deleteApiTagsId"];
	const { mutation: mutationOptions, fetch: fetchOptions } = options
		? options.mutation &&
			"mutationKey" in options.mutation &&
			options.mutation.mutationKey
			? options
			: { ...options, mutation: { ...options.mutation, mutationKey } }
		: { mutation: { mutationKey }, fetch: undefined };

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof deleteApiTagsId>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return deleteApiTagsId(id, fetchOptions);
	};

	return { mutationFn, ...mutationOptions };
};

export type DeleteApiTagsIdMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteApiTagsId>>
>;

export type DeleteApiTagsIdMutationError =
	| DeleteApiTagsId400
	| DeleteApiTagsId401
	| DeleteApiTagsId404
	| DeleteApiTagsId500;

/**
 * @summary Delete tag
 */
export const useDeleteApiTagsId = <
	TError =
		| DeleteApiTagsId400
		| DeleteApiTagsId401
		| DeleteApiTagsId404
		| DeleteApiTagsId500,
	TContext = unknown,
>(
	options?: {
		mutation?: UseMutationOptions<
			Awaited<ReturnType<typeof deleteApiTagsId>>,
			TError,
			{ id: string },
			TContext
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseMutationResult<
	Awaited<ReturnType<typeof deleteApiTagsId>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getDeleteApiTagsIdMutationOptions(options);

	return useMutation(mutationOptions, queryClient);
};

/**
 * Gets goals associated with a specific tag
 * @summary Get goals by tag
 */
export type getApiTagsIdGoalsResponse200 = {
	data: GetApiTagsIdGoals200Item[];
	status: 200;
};

export type getApiTagsIdGoalsResponse400 = {
	data: GetApiTagsIdGoals400;
	status: 400;
};

export type getApiTagsIdGoalsResponse401 = {
	data: GetApiTagsIdGoals401;
	status: 401;
};

export type getApiTagsIdGoalsResponse500 = {
	data: GetApiTagsIdGoals500;
	status: 500;
};

export type getApiTagsIdGoalsResponseComposite =
	| getApiTagsIdGoalsResponse200
	| getApiTagsIdGoalsResponse400
	| getApiTagsIdGoalsResponse401
	| getApiTagsIdGoalsResponse500;

export type getApiTagsIdGoalsResponse = getApiTagsIdGoalsResponseComposite & {
	headers: Headers;
};

export const getGetApiTagsIdGoalsUrl = (
	id: string,
	params?: GetApiTagsIdGoalsParams,
) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? "null" : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `http://localhost:3000/api/tags/${id}/goals?${stringifiedParams}`
		: `http://localhost:3000/api/tags/${id}/goals`;
};

export const getApiTagsIdGoals = async (
	id: string,
	params?: GetApiTagsIdGoalsParams,
	options?: RequestInit,
): Promise<getApiTagsIdGoalsResponse> => {
	const res = await fetch(getGetApiTagsIdGoalsUrl(id, params), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: getApiTagsIdGoalsResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiTagsIdGoalsResponse;
};

export const getGetApiTagsIdGoalsQueryKey = (
	id: string,
	params?: GetApiTagsIdGoalsParams,
) => {
	return [
		`http://localhost:3000/api/tags/${id}/goals`,
		...(params ? [params] : []),
	] as const;
};

export const getGetApiTagsIdGoalsInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getApiTagsIdGoals>>>,
	TError = GetApiTagsIdGoals400 | GetApiTagsIdGoals401 | GetApiTagsIdGoals500,
>(
	id: string,
	params?: GetApiTagsIdGoalsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiTagsIdGoals>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetApiTagsIdGoalsQueryKey(id, params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiTagsIdGoals>>
	> = ({ signal }) =>
		getApiTagsIdGoals(id, params, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getApiTagsIdGoals>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiTagsIdGoalsInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiTagsIdGoals>>
>;
export type GetApiTagsIdGoalsInfiniteQueryError =
	| GetApiTagsIdGoals400
	| GetApiTagsIdGoals401
	| GetApiTagsIdGoals500;

export function useGetApiTagsIdGoalsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiTagsIdGoals>>>,
	TError = GetApiTagsIdGoals400 | GetApiTagsIdGoals401 | GetApiTagsIdGoals500,
>(
	id: string,
	params: undefined | GetApiTagsIdGoalsParams,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiTagsIdGoals>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiTagsIdGoals>>,
					TError,
					Awaited<ReturnType<typeof getApiTagsIdGoals>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTagsIdGoalsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiTagsIdGoals>>>,
	TError = GetApiTagsIdGoals400 | GetApiTagsIdGoals401 | GetApiTagsIdGoals500,
>(
	id: string,
	params?: GetApiTagsIdGoalsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiTagsIdGoals>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiTagsIdGoals>>,
					TError,
					Awaited<ReturnType<typeof getApiTagsIdGoals>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTagsIdGoalsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiTagsIdGoals>>>,
	TError = GetApiTagsIdGoals400 | GetApiTagsIdGoals401 | GetApiTagsIdGoals500,
>(
	id: string,
	params?: GetApiTagsIdGoalsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiTagsIdGoals>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get goals by tag
 */

export function useGetApiTagsIdGoalsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiTagsIdGoals>>>,
	TError = GetApiTagsIdGoals400 | GetApiTagsIdGoals401 | GetApiTagsIdGoals500,
>(
	id: string,
	params?: GetApiTagsIdGoalsParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiTagsIdGoals>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiTagsIdGoalsInfiniteQueryOptions(
		id,
		params,
		options,
	);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetApiTagsIdGoalsQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiTagsIdGoals>>,
	TError = GetApiTagsIdGoals400 | GetApiTagsIdGoals401 | GetApiTagsIdGoals500,
>(
	id: string,
	params?: GetApiTagsIdGoalsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiTagsIdGoals>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetApiTagsIdGoalsQueryKey(id, params);

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiTagsIdGoals>>
	> = ({ signal }) =>
		getApiTagsIdGoals(id, params, { signal, ...fetchOptions });

	return {
		queryKey,
		queryFn,
		enabled: !!id,
		...queryOptions,
	} as UseQueryOptions<
		Awaited<ReturnType<typeof getApiTagsIdGoals>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiTagsIdGoalsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiTagsIdGoals>>
>;
export type GetApiTagsIdGoalsQueryError =
	| GetApiTagsIdGoals400
	| GetApiTagsIdGoals401
	| GetApiTagsIdGoals500;

export function useGetApiTagsIdGoals<
	TData = Awaited<ReturnType<typeof getApiTagsIdGoals>>,
	TError = GetApiTagsIdGoals400 | GetApiTagsIdGoals401 | GetApiTagsIdGoals500,
>(
	id: string,
	params: undefined | GetApiTagsIdGoalsParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiTagsIdGoals>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiTagsIdGoals>>,
					TError,
					Awaited<ReturnType<typeof getApiTagsIdGoals>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTagsIdGoals<
	TData = Awaited<ReturnType<typeof getApiTagsIdGoals>>,
	TError = GetApiTagsIdGoals400 | GetApiTagsIdGoals401 | GetApiTagsIdGoals500,
>(
	id: string,
	params?: GetApiTagsIdGoalsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiTagsIdGoals>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiTagsIdGoals>>,
					TError,
					Awaited<ReturnType<typeof getApiTagsIdGoals>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTagsIdGoals<
	TData = Awaited<ReturnType<typeof getApiTagsIdGoals>>,
	TError = GetApiTagsIdGoals400 | GetApiTagsIdGoals401 | GetApiTagsIdGoals500,
>(
	id: string,
	params?: GetApiTagsIdGoalsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiTagsIdGoals>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get goals by tag
 */

export function useGetApiTagsIdGoals<
	TData = Awaited<ReturnType<typeof getApiTagsIdGoals>>,
	TError = GetApiTagsIdGoals400 | GetApiTagsIdGoals401 | GetApiTagsIdGoals500,
>(
	id: string,
	params?: GetApiTagsIdGoalsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiTagsIdGoals>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiTagsIdGoalsQueryOptions(id, params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Returns pinned resources including entries and goals. This is mainly meant for the sidebar.
 * @summary Get pinned resources
 */
export type getApiMiscPinnedResponse200 = {
	data: GetApiMiscPinned200;
	status: 200;
};

export type getApiMiscPinnedResponse401 = {
	data: GetApiMiscPinned401;
	status: 401;
};

export type getApiMiscPinnedResponse500 = {
	data: GetApiMiscPinned500;
	status: 500;
};

export type getApiMiscPinnedResponseComposite =
	| getApiMiscPinnedResponse200
	| getApiMiscPinnedResponse401
	| getApiMiscPinnedResponse500;

export type getApiMiscPinnedResponse = getApiMiscPinnedResponseComposite & {
	headers: Headers;
};

export const getGetApiMiscPinnedUrl = () => {
	return `http://localhost:3000/api/misc/pinned`;
};

export const getApiMiscPinned = async (
	options?: RequestInit,
): Promise<getApiMiscPinnedResponse> => {
	const res = await fetch(getGetApiMiscPinnedUrl(), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: getApiMiscPinnedResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiMiscPinnedResponse;
};

export const getGetApiMiscPinnedQueryKey = () => {
	return [`http://localhost:3000/api/misc/pinned`] as const;
};

export const getGetApiMiscPinnedInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getApiMiscPinned>>>,
	TError = GetApiMiscPinned401 | GetApiMiscPinned500,
>(options?: {
	query?: Partial<
		UseInfiniteQueryOptions<
			Awaited<ReturnType<typeof getApiMiscPinned>>,
			TError,
			TData
		>
	>;
	fetch?: RequestInit;
}) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiMiscPinnedQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiMiscPinned>>
	> = ({ signal }) => getApiMiscPinned({ signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getApiMiscPinned>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiMiscPinnedInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiMiscPinned>>
>;
export type GetApiMiscPinnedInfiniteQueryError =
	| GetApiMiscPinned401
	| GetApiMiscPinned500;

export function useGetApiMiscPinnedInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiMiscPinned>>>,
	TError = GetApiMiscPinned401 | GetApiMiscPinned500,
>(
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiMiscPinned>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiMiscPinned>>,
					TError,
					Awaited<ReturnType<typeof getApiMiscPinned>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiMiscPinnedInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiMiscPinned>>>,
	TError = GetApiMiscPinned401 | GetApiMiscPinned500,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiMiscPinned>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiMiscPinned>>,
					TError,
					Awaited<ReturnType<typeof getApiMiscPinned>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiMiscPinnedInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiMiscPinned>>>,
	TError = GetApiMiscPinned401 | GetApiMiscPinned500,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiMiscPinned>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get pinned resources
 */

export function useGetApiMiscPinnedInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiMiscPinned>>>,
	TError = GetApiMiscPinned401 | GetApiMiscPinned500,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiMiscPinned>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiMiscPinnedInfiniteQueryOptions(options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetApiMiscPinnedQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiMiscPinned>>,
	TError = GetApiMiscPinned401 | GetApiMiscPinned500,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiMiscPinned>>, TError, TData>
	>;
	fetch?: RequestInit;
}) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiMiscPinnedQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getApiMiscPinned>>
	> = ({ signal }) => getApiMiscPinned({ signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiMiscPinned>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiMiscPinnedQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiMiscPinned>>
>;
export type GetApiMiscPinnedQueryError =
	| GetApiMiscPinned401
	| GetApiMiscPinned500;

export function useGetApiMiscPinned<
	TData = Awaited<ReturnType<typeof getApiMiscPinned>>,
	TError = GetApiMiscPinned401 | GetApiMiscPinned500,
>(
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiMiscPinned>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiMiscPinned>>,
					TError,
					Awaited<ReturnType<typeof getApiMiscPinned>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiMiscPinned<
	TData = Awaited<ReturnType<typeof getApiMiscPinned>>,
	TError = GetApiMiscPinned401 | GetApiMiscPinned500,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiMiscPinned>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiMiscPinned>>,
					TError,
					Awaited<ReturnType<typeof getApiMiscPinned>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiMiscPinned<
	TData = Awaited<ReturnType<typeof getApiMiscPinned>>,
	TError = GetApiMiscPinned401 | GetApiMiscPinned500,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiMiscPinned>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get pinned resources
 */

export function useGetApiMiscPinned<
	TData = Awaited<ReturnType<typeof getApiMiscPinned>>,
	TError = GetApiMiscPinned401 | GetApiMiscPinned500,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getApiMiscPinned>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiMiscPinnedQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Gets 3 writing prompts. The prompts will always be static since we don't have AI. These prompts are hard-coded.
 * @summary Get writing prompts
 */
export type getApiPromptsResponse200 = {
	data: GetApiPrompts200;
	status: 200;
};

export type getApiPromptsResponse401 = {
	data: GetApiPrompts401;
	status: 401;
};

export type getApiPromptsResponse500 = {
	data: GetApiPrompts500;
	status: 500;
};

export type getApiPromptsResponseComposite =
	| getApiPromptsResponse200
	| getApiPromptsResponse401
	| getApiPromptsResponse500;

export type getApiPromptsResponse = getApiPromptsResponseComposite & {
	headers: Headers;
};

export const getGetApiPromptsUrl = () => {
	return `http://localhost:3000/api/prompts`;
};

export const getApiPrompts = async (
	options?: RequestInit,
): Promise<getApiPromptsResponse> => {
	const res = await fetch(getGetApiPromptsUrl(), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: getApiPromptsResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiPromptsResponse;
};

export const getGetApiPromptsQueryKey = () => {
	return [`http://localhost:3000/api/prompts`] as const;
};

export const getGetApiPromptsInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getApiPrompts>>>,
	TError = GetApiPrompts401 | GetApiPrompts500,
>(options?: {
	query?: Partial<
		UseInfiniteQueryOptions<
			Awaited<ReturnType<typeof getApiPrompts>>,
			TError,
			TData
		>
	>;
	fetch?: RequestInit;
}) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiPromptsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPrompts>>> = ({
		signal,
	}) => getApiPrompts({ signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getApiPrompts>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiPromptsInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiPrompts>>
>;
export type GetApiPromptsInfiniteQueryError =
	| GetApiPrompts401
	| GetApiPrompts500;

export function useGetApiPromptsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiPrompts>>>,
	TError = GetApiPrompts401 | GetApiPrompts500,
>(
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiPrompts>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiPrompts>>,
					TError,
					Awaited<ReturnType<typeof getApiPrompts>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPromptsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiPrompts>>>,
	TError = GetApiPrompts401 | GetApiPrompts500,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiPrompts>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiPrompts>>,
					TError,
					Awaited<ReturnType<typeof getApiPrompts>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPromptsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiPrompts>>>,
	TError = GetApiPrompts401 | GetApiPrompts500,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiPrompts>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get writing prompts
 */

export function useGetApiPromptsInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiPrompts>>>,
	TError = GetApiPrompts401 | GetApiPrompts500,
>(
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiPrompts>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiPromptsInfiniteQueryOptions(options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetApiPromptsQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiPrompts>>,
	TError = GetApiPrompts401 | GetApiPrompts500,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiPrompts>>, TError, TData>
	>;
	fetch?: RequestInit;
}) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiPromptsQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPrompts>>> = ({
		signal,
	}) => getApiPrompts({ signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiPrompts>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiPromptsQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiPrompts>>
>;
export type GetApiPromptsQueryError = GetApiPrompts401 | GetApiPrompts500;

export function useGetApiPrompts<
	TData = Awaited<ReturnType<typeof getApiPrompts>>,
	TError = GetApiPrompts401 | GetApiPrompts500,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiPrompts>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiPrompts>>,
					TError,
					Awaited<ReturnType<typeof getApiPrompts>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPrompts<
	TData = Awaited<ReturnType<typeof getApiPrompts>>,
	TError = GetApiPrompts401 | GetApiPrompts500,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiPrompts>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiPrompts>>,
					TError,
					Awaited<ReturnType<typeof getApiPrompts>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiPrompts<
	TData = Awaited<ReturnType<typeof getApiPrompts>>,
	TError = GetApiPrompts401 | GetApiPrompts500,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiPrompts>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get writing prompts
 */

export function useGetApiPrompts<
	TData = Awaited<ReturnType<typeof getApiPrompts>>,
	TError = GetApiPrompts401 | GetApiPrompts500,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiPrompts>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiPromptsQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Returns entries, goals, and logs that match the search term. This is entirely based on Full-Text Search.
 * @summary Search Jadebook
 */
export type getApiSearchResponse200 = {
	data: GetApiSearch200;
	status: 200;
};

export type getApiSearchResponse401 = {
	data: GetApiSearch401;
	status: 401;
};

export type getApiSearchResponse500 = {
	data: GetApiSearch500;
	status: 500;
};

export type getApiSearchResponseComposite =
	| getApiSearchResponse200
	| getApiSearchResponse401
	| getApiSearchResponse500;

export type getApiSearchResponse = getApiSearchResponseComposite & {
	headers: Headers;
};

export const getGetApiSearchUrl = (params: GetApiSearchParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? "null" : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `http://localhost:3000/api/search?${stringifiedParams}`
		: `http://localhost:3000/api/search`;
};

export const getApiSearch = async (
	params: GetApiSearchParams,
	options?: RequestInit,
): Promise<getApiSearchResponse> => {
	const res = await fetch(getGetApiSearchUrl(params), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: getApiSearchResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as getApiSearchResponse;
};

export const getGetApiSearchQueryKey = (params: GetApiSearchParams) => {
	return [
		`http://localhost:3000/api/search`,
		...(params ? [params] : []),
	] as const;
};

export const getGetApiSearchInfiniteQueryOptions = <
	TData = InfiniteData<Awaited<ReturnType<typeof getApiSearch>>>,
	TError = GetApiSearch401 | GetApiSearch500,
>(
	params: GetApiSearchParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiSearch>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiSearchQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiSearch>>> = ({
		signal,
	}) => getApiSearch(params, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
		Awaited<ReturnType<typeof getApiSearch>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiSearchInfiniteQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiSearch>>
>;
export type GetApiSearchInfiniteQueryError = GetApiSearch401 | GetApiSearch500;

export function useGetApiSearchInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiSearch>>>,
	TError = GetApiSearch401 | GetApiSearch500,
>(
	params: GetApiSearchParams,
	options: {
		query: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiSearch>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiSearch>>,
					TError,
					Awaited<ReturnType<typeof getApiSearch>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSearchInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiSearch>>>,
	TError = GetApiSearch401 | GetApiSearch500,
>(
	params: GetApiSearchParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiSearch>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiSearch>>,
					TError,
					Awaited<ReturnType<typeof getApiSearch>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSearchInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiSearch>>>,
	TError = GetApiSearch401 | GetApiSearch500,
>(
	params: GetApiSearchParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiSearch>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search Jadebook
 */

export function useGetApiSearchInfinite<
	TData = InfiniteData<Awaited<ReturnType<typeof getApiSearch>>>,
	TError = GetApiSearch401 | GetApiSearch500,
>(
	params: GetApiSearchParams,
	options?: {
		query?: Partial<
			UseInfiniteQueryOptions<
				Awaited<ReturnType<typeof getApiSearch>>,
				TError,
				TData
			>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiSearchInfiniteQueryOptions(params, options);

	const query = useInfiniteQuery(
		queryOptions,
		queryClient,
	) as UseInfiniteQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getGetApiSearchQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiSearch>>,
	TError = GetApiSearch401 | GetApiSearch500,
>(
	params: GetApiSearchParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiSearch>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiSearchQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiSearch>>> = ({
		signal,
	}) => getApiSearch(params, { signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiSearch>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiSearchQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiSearch>>
>;
export type GetApiSearchQueryError = GetApiSearch401 | GetApiSearch500;

export function useGetApiSearch<
	TData = Awaited<ReturnType<typeof getApiSearch>>,
	TError = GetApiSearch401 | GetApiSearch500,
>(
	params: GetApiSearchParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiSearch>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiSearch>>,
					TError,
					Awaited<ReturnType<typeof getApiSearch>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSearch<
	TData = Awaited<ReturnType<typeof getApiSearch>>,
	TError = GetApiSearch401 | GetApiSearch500,
>(
	params: GetApiSearchParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiSearch>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiSearch>>,
					TError,
					Awaited<ReturnType<typeof getApiSearch>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSearch<
	TData = Awaited<ReturnType<typeof getApiSearch>>,
	TError = GetApiSearch401 | GetApiSearch500,
>(
	params: GetApiSearchParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiSearch>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Search Jadebook
 */

export function useGetApiSearch<
	TData = Awaited<ReturnType<typeof getApiSearch>>,
	TError = GetApiSearch401 | GetApiSearch500,
>(
	params: GetApiSearchParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiSearch>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiSearchQueryOptions(params, options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
